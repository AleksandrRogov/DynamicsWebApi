{
  "version": 3,
  "sources": ["../src/helpers/Crypto.ts", "../src/helpers/Regex.ts", "../src/utils/Utility.ts", "../src/helpers/ErrorHelper.ts", "../src/dwa.ts", "../src/client/helpers/dateReviver.ts", "../src/client/helpers/parseBatchResponse.ts", "../src/client/helpers/parseResponse.ts", "../src/client/helpers/parseResponseHeaders.ts", "../src/client/xhr.ts", "../src/dynamics-web-api.ts", "../src/utils/Config.ts", "../src/client/RequestClient.ts", "../src/utils/Request.ts", "../src/client/helpers/executeRequest.ts"],
  "sourcesContent": ["export function getCrypto<T = any>(): T {\r\n    return global.DWA_BROWSER ? global.window.crypto : require(\"./crypto/node\").getCrypto();\r\n}\r\n\r\nexport function generateRandomBytes() {\r\n    return global.DWA_BROWSER ? getCrypto().getRandomValues(new Uint8Array(1)) : getCrypto().randomBytes(1);\r\n}\r\n", "import type { ReferenceObject } from \"../types\";\r\n\r\nconst UUID = \"[0-9a-fA-F]{8}[-]?([0-9a-fA-F]{4}[-]?){3}[0-9a-fA-F]{12}\";\r\n\r\nexport const UUID_REGEX = new RegExp(UUID, \"i\");\r\nexport const EXTRACT_UUID_REGEX = new RegExp(\"^{?(\" + UUID + \")}?$\", \"i\");\r\nexport const EXTRACT_UUID_FROM_URL_REGEX = new RegExp(\"(\" + UUID + \")\\\\)$\", \"i\");\r\n//global here is fine because the state is reset inside string.replace function\r\nexport const REMOVE_BRACKETS_FROM_UUID_REGEX = new RegExp(`{(${UUID})}`, \"g\");\r\nexport const ENTITY_UUID_REGEX = new RegExp(`\\\\/(\\\\w+)\\\\((${UUID})`, \"i\");\r\n\r\nexport function isUuid(value: string): boolean {\r\n    const match = UUID_REGEX.exec(value);\r\n    return !!match;\r\n}\r\n\r\nexport function extractUuid(value: string): string | null {\r\n    const match = EXTRACT_UUID_REGEX.exec(value);\r\n    return match ? match[1] : null;\r\n}\r\n\r\nexport function extractUuidFromUrl(url?: string): string | null {\r\n    if (!url) return null;\r\n    const match = EXTRACT_UUID_FROM_URL_REGEX.exec(url);\r\n    return match ? match[1] : null;\r\n}\r\n\r\nexport function removeCurlyBracketsFromUuid(value: string): string {\r\n    return value.replace(REMOVE_BRACKETS_FROM_UUID_REGEX, (_match, p1) => p1);\r\n}\r\n\r\nconst QUOTATION_MARK_REGEX = /([\"'].*?[\"'])/;\r\n\r\n/**\r\n * Safely removes curly brackets from guids in a URL\r\n * @param url URL to remove curly brackets from\r\n * @returns URL with guid without curly brackets\r\n */\r\nexport function safelyRemoveCurlyBracketsFromUrl(url: string): string {\r\n    //todo: in future I will need to replace this with a negative lookbehind and lookahead\r\n\r\n    // Split the filter string by quotation marks\r\n    const parts = url.split(QUOTATION_MARK_REGEX);\r\n    return parts\r\n        .map((part, index) => {\r\n            // Only process parts that are not within quotes\r\n            if (index % 2 === 0) {\r\n                return removeCurlyBracketsFromUuid(part);\r\n            }\r\n            return part;\r\n        })\r\n        .join(\"\");\r\n}\r\n\r\n/**\r\n * Converts a response to a reference object\r\n * @param {Object} responseData - Response object\r\n * @returns {ReferenceObject}\r\n */\r\nexport function convertToReferenceObject(responseData: Record<string, any>): ReferenceObject {\r\n    const result = ENTITY_UUID_REGEX.exec(responseData[\"@odata.id\"]);\r\n    return { id: result![2], collection: result![1], oDataContext: responseData[\"@odata.context\"] };\r\n}\r\n\r\nexport const PAGING_COOKIE_REGEX = /pagingcookie=\"(<cookie page=\"(\\d+)\".+<\\/cookie>)/;\r\nexport const SPECIAL_CHARACTER_REGEX = /[<>\"']/g;\r\n\r\n/**\r\n * Parses a paging cookie\r\n * @param pagingCookie Paging cookie to parse\r\n * @returns\r\n */\r\nexport function parsePagingCookie(pagingCookie: string) {\r\n    const info = PAGING_COOKIE_REGEX.exec(pagingCookie);\r\n\r\n    if (!info) return null;\r\n\r\n    const page = parseInt(info[2], 10);\r\n    const sanitizedCookie = sanitizeCookie(info[1]);\r\n\r\n    return { page, sanitizedCookie };\r\n}\r\n\r\n/**\r\n * Sanitizes a cookie\r\n * @param cookie Cookie to sanitize\r\n * @returns\r\n */\r\nfunction sanitizeCookie(cookie: string): string {\r\n    const characterMap: { [key: string]: string } = {\r\n        \"<\": \"&lt;\",\r\n        \">\": \"&gt;\",\r\n        '\"': \"&quot;\",\r\n        \"'\": \"&#39;\", // Use numeric reference for single quote to avoid confusion\r\n    };\r\n\r\n    return cookie.replace(SPECIAL_CHARACTER_REGEX, (char) => characterMap[char]);\r\n}\r\n\r\nconst LEADING_SLASH_REGEX = /^\\//;\r\nexport function removeLeadingSlash(value: string): string {\r\n    return value.replace(LEADING_SLASH_REGEX, \"\");\r\n}\r\n\r\nconst UNICODE_SYMBOLS_REGEX = /[\\u007F-\\uFFFF]/g;\r\nexport function escapeUnicodeSymbols(value: string): string {\r\n    return value.replace(UNICODE_SYMBOLS_REGEX, (chr: string) => `\\\\u${(\"0000\" + chr.charCodeAt(0).toString(16)).slice(-4)}`);\r\n}\r\n\r\nconst DOUBLE_QUOTE_REGEX = /\"/g;\r\nexport function removeDoubleQuotes(value: string): string {\r\n    return value.replace(DOUBLE_QUOTE_REGEX, \"\");\r\n}\r\n\r\nexport const BATCH_RESPONSE_HEADERS_REGEX = /^([^()<>@,;:\\\\\"\\/[\\]?={} \\t]+)\\s?:\\s?(.*)/;\r\nexport const HTTP_STATUS_REGEX = /HTTP\\/?\\s*[\\d.]*\\s+(\\d{3})\\s+([\\w\\s]*)$/m;\r\nexport const CONTENT_TYPE_PLAIN_REGEX = /Content-Type: text\\/plain/i;\r\nexport const ODATA_ENTITYID_REGEX = /OData-EntityId.+/i;\r\nexport const TEXT_REGEX = /\\w+$/g;\r\nexport const LINE_ENDING_REGEX = /\\r?\\n/;\r\nexport const SEARCH_FOR_ENTITY_NAME_REGEX = /(\\w+)(\\([\\d\\w-]+\\))$/;\r\nexport const SPECIAL_COLLECTION_FOR_UPDATE_REGEX = /EntityDefinitions|RelationshipDefinitions|GlobalOptionSetDefinitions/;\r\n\r\n/**Metadata definitions cannot be updated using \"PATCH\" method */\r\nexport function getUpdateMethod(collection: string | undefined | null){\r\n    return SPECIAL_COLLECTION_FOR_UPDATE_REGEX.test(collection ?? \"\") ? \"PUT\" : \"PATCH\";\r\n}\r\n\r\nexport const FETCH_XML_TOP_REGEX = /^<fetch.+top=/;\r\nexport const FETCH_XML_PAGE_REGEX = /^<fetch.+page=/;\r\nexport const FETCH_XML_REPLACE_REGEX = /^(<fetch)/;", "\uFEFFimport type * as Core from \"../types\";\r\nimport { generateRandomBytes } from \"../helpers/Crypto\";\r\nimport { isUuid, extractUuid, parsePagingCookie } from \"../helpers/Regex\";\r\n\r\ndeclare var GetGlobalContext: any;\r\ndeclare var Xrm: any;\r\n\r\nconst downloadChunkSize = 4194304;\r\n\r\nfunction formatParameterValue(value: any): string {\r\n    if (value == null) return \"\";\r\n\r\n    if (typeof value === \"string\" && !value.startsWith(\"Microsoft.Dynamics.CRM\") && !isUuid(value)) {\r\n        return `'${value}'`;\r\n    } else if (typeof value === \"object\") {\r\n        return JSON.stringify(value);\r\n    }\r\n\r\n    return value.toString();\r\n}\r\n\r\nfunction processParameters(parameters: { [key: string]: any }): { key: string; queryParams: string[] } {\r\n    const parameterNames = Object.keys(parameters);\r\n    const functionParams: string[] = [];\r\n    const urlQuery: string[] = [];\r\n\r\n    parameterNames.forEach((parameterName, index) => {\r\n        let value = parameters[parameterName];\r\n        if (value == null) return;\r\n\r\n        value = formatParameterValue(value);\r\n\r\n        const paramIndex = index + 1;\r\n        functionParams.push(`${parameterName}=@p${paramIndex}`);\r\n        urlQuery.push(`@p${paramIndex}=${extractUuid(value) || value}`);\r\n    });\r\n\r\n    return {\r\n        key: `(${functionParams.join(\",\")})`,\r\n        queryParams: urlQuery,\r\n    };\r\n}\r\n\r\nexport function hasHeader(headers: Record<string, string>, name: string): boolean {\r\n    return headers.hasOwnProperty(name) || headers.hasOwnProperty(name.toLowerCase());\r\n}\r\n\r\nexport function getHeader(headers: Record<string, string>, name: string): string | undefined {\r\n    if (headers[name]) return headers[name];\r\n\r\n    return headers[name.toLowerCase()];\r\n}\r\n\r\nexport class Utility {\r\n    /**\r\n     * Builds parametes for a funciton. Returns '()' (if no parameters) or '([params])?[query]'\r\n     *\r\n     * @param {Object} [parameters] - Function's input parameters. Example: { param1: \"test\", param2: 3 }.\r\n     * @returns {string}\r\n     */\r\n    static buildFunctionParameters(parameters?: any): Core.FunctionParameters {\r\n        return parameters ? processParameters(parameters) : { key: \"()\" };\r\n    }\r\n\r\n    /**\r\n     * Parses a paging cookie returned in response\r\n     *\r\n     * @param {string} pageCookies - Page cookies returned in @Microsoft.Dynamics.CRM.fetchxmlpagingcookie.\r\n     * @param {number} currentPageNumber - A current page number. Fix empty paging-cookie for complex fetch xmls.\r\n     * @returns {{cookie: \"\", number: 0, next: 1}}\r\n     */\r\n    static getFetchXmlPagingCookie(pageCookies: string = \"\", currentPageNumber: number = 1): Core.FetchXmlCookie {\r\n        //get the page cokies\r\n        pageCookies = decodeURIComponent(decodeURIComponent(pageCookies));\r\n\r\n        const result = parsePagingCookie(pageCookies);\r\n\r\n        // http://stackoverflow.com/questions/41262772/execution-of-fetch-xml-using-web-api-dynamics-365 workaround\r\n        return {\r\n            cookie: result?.sanitizedCookie || \"\",\r\n            page: result?.page || currentPageNumber,\r\n            nextPage: result?.page ? result.page + 1 : currentPageNumber + 1,\r\n        };\r\n    }\r\n\r\n    // static isNodeEnv = isNodeEnv;\r\n\r\n    static downloadChunkSize = downloadChunkSize;\r\n\r\n    /**\r\n     * Checks whether the value is JS Null.\r\n     * @param {Object} value\r\n     * @returns {boolean}\r\n     */\r\n    static isNull(value: any): value is undefined | null {\r\n        return typeof value === \"undefined\" || value == null;\r\n    }\r\n\r\n    /** Generates UUID */\r\n    static generateUUID(): string {\r\n        return (<any>[1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, (c) => (c ^ (generateRandomBytes()[0] & (15 >> (c / 4)))).toString(16));\r\n    }\r\n\r\n    static getXrmContext(): any {\r\n        if (typeof GetGlobalContext !== \"undefined\") {\r\n            return GetGlobalContext();\r\n        } else {\r\n            if (typeof Xrm !== \"undefined\") {\r\n                //d365 v.9.0\r\n                if (!Utility.isNull(Xrm.Utility) && !Utility.isNull(Xrm.Utility.getGlobalContext)) {\r\n                    return Xrm.Utility.getGlobalContext();\r\n                } else if (!Utility.isNull(Xrm.Page) && !Utility.isNull(Xrm.Page.context)) {\r\n                    return Xrm.Page.context;\r\n                }\r\n            }\r\n        }\r\n\r\n        throw new Error(\r\n            \"Xrm Context is not available. In most cases, it can be resolved by adding a reference to a ClientGlobalContext.js.aspx. Please refer to MSDN documentation for more details.\"\r\n        );\r\n    }\r\n\r\n    // static getXrmUtility(): any {\r\n    //     return typeof Xrm !== \"undefined\" ? Xrm.Utility : null;\r\n    // }\r\n\r\n    static getClientUrl(): string {\r\n        const context = Utility.getXrmContext();\r\n\r\n        let clientUrl = context.getClientUrl();\r\n\r\n        if (clientUrl.match(/\\/$/)) {\r\n            clientUrl = clientUrl.substring(0, clientUrl.length - 1);\r\n        }\r\n        return clientUrl;\r\n    }\r\n\r\n    /**\r\n     * Checks whether the app is currently running in a Dynamics Portals Environment.\r\n     *\r\n     * In that case we switch to the Web API for Dynamics Portals.\r\n     * @returns {boolean}\r\n     */\r\n    static isRunningWithinPortals(): boolean {\r\n        return global.DWA_BROWSER ? !!global.window.shell : false;\r\n    }\r\n\r\n    static isObject(obj: any): boolean {\r\n        return typeof obj === \"object\" && !!obj && !Array.isArray(obj) && Object.prototype.toString.call(obj) !== \"[object Date]\";\r\n    }\r\n\r\n    static copyObject<T = any>(src: any, excludeProps?: string[]): T {\r\n        let target = {};\r\n        for (let prop in src) {\r\n            if (src.hasOwnProperty(prop) && !excludeProps?.includes(prop)) {\r\n                // if the value is a nested object, recursively copy all its properties\r\n                if (Utility.isObject(src[prop])) {\r\n                    target[prop] = Utility.copyObject(src[prop]);\r\n                } else if (Array.isArray(src[prop])) {\r\n                    target[prop] = src[prop].slice();\r\n                } else {\r\n                    target[prop] = src[prop];\r\n                }\r\n            }\r\n        }\r\n        return <T>target;\r\n    }\r\n\r\n    static copyRequest(src: any, excludeProps: string[] = []): Core.InternalRequest {\r\n        //todo: do we need to include \"data\" in here?\r\n        if (!excludeProps.includes(\"signal\")) excludeProps.push(\"signal\");\r\n\r\n        const result = Utility.copyObject<Core.InternalRequest>(src, excludeProps);\r\n        result.signal = src.signal;\r\n\r\n        return result;\r\n    }\r\n\r\n    static setFileChunk(request: Core.InternalRequest, fileBuffer: Uint8Array | Buffer, chunkSize: number, offset: number): void {\r\n        offset = offset || 0;\r\n\r\n        const count = offset + chunkSize > fileBuffer.length ? fileBuffer.length % chunkSize : chunkSize;\r\n\r\n        let content: any;\r\n\r\n        if (global.DWA_BROWSER) {\r\n            content = new Uint8Array(count);\r\n            for (let i = 0; i < count; i++) {\r\n                content[i] = fileBuffer[offset + i];\r\n            }\r\n        } else {\r\n            content = fileBuffer.slice(offset, offset + count);\r\n        }\r\n\r\n        request.data = content;\r\n        request.contentRange = \"bytes \" + offset + \"-\" + (offset + count - 1) + \"/\" + fileBuffer.length;\r\n    }\r\n\r\n    static convertToFileBuffer(binaryString: string): Uint8Array | Buffer {\r\n        if (!global.DWA_BROWSER) return Buffer.from(binaryString, \"binary\");\r\n\r\n        const bytes = new Uint8Array(binaryString.length);\r\n        for (var i = 0; i < binaryString.length; i++) {\r\n            bytes[i] = binaryString.charCodeAt(i);\r\n        }\r\n        return bytes;\r\n    }\r\n}\r\n", "\uFEFFimport { AccessToken } from \"../dynamics-web-api\";\r\nimport { extractUuid } from \"./Regex\";\r\n\r\nexport interface DynamicsWebApiError extends Error {\r\n    status: number;\r\n}\r\n\r\nfunction throwParameterError(functionName: string, parameterName: string, type: string | null | undefined): void {\r\n    throw new Error(\r\n        type ? `${functionName} requires a ${parameterName} parameter to be of type ${type}.` : `${functionName} requires a ${parameterName} parameter.`\r\n    );\r\n}\r\n\r\nexport class ErrorHelper {\r\n    static handleErrorResponse(req): void {\r\n        throw new Error(`Error: ${req.status}: ${req.message}`);\r\n    }\r\n\r\n    static parameterCheck(parameter: any, functionName: string, parameterName: string, type?: string): void {\r\n        if (typeof parameter === \"undefined\" || parameter === null || parameter === \"\") {\r\n            throwParameterError(functionName, parameterName, type);\r\n        }\r\n    }\r\n\r\n    static stringParameterCheck(parameter: any, functionName: string, parameterName: string): void {\r\n        if (typeof parameter !== \"string\") {\r\n            throwParameterError(functionName, parameterName, \"String\");\r\n        }\r\n    }\r\n\r\n    static maxLengthStringParameterCheck(parameter: string | null, functionName: string, parameterName: string, maxLength: number): void {\r\n        if (!parameter) return;\r\n\r\n        if (parameter.length > maxLength) {\r\n            throw new Error(`${parameterName} has a ${maxLength} character limit.`);\r\n        }\r\n    }\r\n\r\n    static arrayParameterCheck(parameter: any, functionName: string, parameterName: string): void {\r\n        if (parameter.constructor !== Array) {\r\n            throwParameterError(functionName, parameterName, \"Array\");\r\n        }\r\n    }\r\n\r\n    static stringOrArrayParameterCheck(parameter: any, functionName: string, parameterName: string): void {\r\n        if (parameter.constructor !== Array && typeof parameter !== \"string\") {\r\n            throwParameterError(functionName, parameterName, \"String or Array\");\r\n        }\r\n    }\r\n\r\n    static numberParameterCheck(parameter: any, functionName: string, parameterName: string): void {\r\n        if (typeof parameter != \"number\") {\r\n            if (typeof parameter === \"string\" && parameter) {\r\n                if (!isNaN(parseInt(parameter))) {\r\n                    return;\r\n                }\r\n            }\r\n            throwParameterError(functionName, parameterName, \"Number\");\r\n        }\r\n    }\r\n\r\n    static batchIsEmpty(): Error[] {\r\n        return [\r\n            new Error(\r\n                \"Payload of the batch operation is empty. Please make that you have other operations in between startBatch() and executeBatch() to successfuly build a batch payload.\"\r\n            ),\r\n        ];\r\n    }\r\n\r\n    static handleHttpError(parsedError: any, parameters?: any): DynamicsWebApiError {\r\n        const error = new Error();\r\n\r\n        Object.keys(parsedError).forEach((k) => {\r\n            error[k] = parsedError[k];\r\n        });\r\n\r\n        if (parameters) {\r\n            Object.keys(parameters).forEach((k) => {\r\n                error[k] = parameters[k];\r\n            });\r\n        }\r\n\r\n        return <DynamicsWebApiError>error;\r\n    }\r\n\r\n    static boolParameterCheck(parameter: any, functionName: string, parameterName: string): void {\r\n        if (typeof parameter != \"boolean\") {\r\n            throwParameterError(functionName, parameterName, \"Boolean\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Private function used to check whether required parameter is a valid GUID\r\n     * @param parameter The GUID parameter to check\r\n     * @param functionName\r\n     * @param parameterName\r\n     * @returns\r\n     */\r\n    static guidParameterCheck(parameter: any, functionName: string, parameterName: string): string {\r\n        const match = extractUuid(parameter);\r\n        if (!match) throwParameterError(functionName, parameterName, \"GUID String\");\r\n\r\n        return match!;\r\n    }\r\n\r\n    static keyParameterCheck(parameter: any, functionName: string, parameterName: string): string | undefined {\r\n        try {\r\n            ErrorHelper.stringParameterCheck(parameter, functionName, parameterName);\r\n\r\n            //check if the param is a guid\r\n            const match = extractUuid(parameter);\r\n            if (match) return match;\r\n\r\n            //check the alternate key\r\n            const alternateKeys = parameter.split(\",\");\r\n\r\n            if (alternateKeys.length) {\r\n                for (let i = 0; i < alternateKeys.length; i++) {\r\n                    alternateKeys[i] = alternateKeys[i].trim().replace(/\"/g, \"'\");\r\n                    /^[\\w\\d\\_]+\\=(.+)$/i.exec(alternateKeys[i])![0];\r\n                }\r\n            }\r\n\r\n            return alternateKeys.join(\",\");\r\n        } catch (error) {\r\n            throwParameterError(functionName, parameterName, \"String representing GUID or Alternate Key\");\r\n        }\r\n    }\r\n\r\n    static callbackParameterCheck(callbackParameter: () => Promise<string | AccessToken | null>, functionName: string, parameterName: string): void {\r\n        if (typeof callbackParameter != \"function\") {\r\n            throwParameterError(functionName, parameterName, \"Function\");\r\n        }\r\n    }\r\n\r\n    static throwBatchIncompatible(functionName: string, isBatch: boolean): void {\r\n        if (isBatch) {\r\n            isBatch = false;\r\n            throw new Error(functionName + \" cannot be used in a BATCH request.\");\r\n        }\r\n    }\r\n\r\n    static throwBatchNotStarted(isBatch: boolean): void {\r\n        if (!isBatch) {\r\n            throw new Error(\r\n                \"Batch operation has not been started. Please call a DynamicsWebApi.startBatch() function prior to calling DynamicsWebApi.executeBatch() to perform a batch request correctly.\"\r\n            );\r\n        }\r\n    }\r\n}\r\n", "class DWA {\r\n\tstatic Prefer = class {\r\n\t\tstatic ReturnRepresentation: string = \"return=representation\";\r\n\t\tstatic Annotations = class {\r\n\t\t\tstatic AssociatedNavigationProperty: string = \"Microsoft.Dynamics.CRM.associatednavigationproperty\";\r\n\t\t\tstatic LookupLogicalName: string = \"Microsoft.Dynamics.CRM.lookuplogicalname\";\r\n\t\t\tstatic All: string = \"*\";\r\n\t\t\tstatic FormattedValue: string = \"OData.Community.Display.V1.FormattedValue\";\r\n\t\t\tstatic FetchXmlPagingCookie: string = \"Microsoft.Dynamics.CRM.fetchxmlpagingcookie\";\r\n\t\t};\r\n\t\tstatic IncludeAnnotations: string = \"odata.include-annotations\";\r\n\t\tstatic get(annotation: string) {\r\n\t\t\treturn `${DWA.Prefer.IncludeAnnotations}=\"${annotation}\"`;\r\n\t\t}\r\n\t};\r\n}\r\n\r\nexport { DWA };\r\n", "\uFEFFexport function dateReviver(key: string, value: any): Date {\r\n\tif (typeof value === \"string\") {\r\n\t\tconst a = /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(?:Z|[-+]\\d{2}:\\d{2})$/.exec(value);\r\n\t\tif (a) {\r\n\t\t\treturn new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4], +a[5], +a[6]));\r\n\t\t}\r\n\t}\r\n\treturn value;\r\n}\r\n", "import { DynamicsWebApiError, ErrorHelper } from \"../../helpers/ErrorHelper\";\r\nimport {\r\n    BATCH_RESPONSE_HEADERS_REGEX,\r\n    LINE_ENDING_REGEX,\r\n    HTTP_STATUS_REGEX,\r\n    TEXT_REGEX,\r\n    CONTENT_TYPE_PLAIN_REGEX,\r\n    ODATA_ENTITYID_REGEX,\r\n    extractUuidFromUrl,\r\n} from \"../../helpers/Regex\";\r\nimport { handleJsonResponse, handlePlainResponse } from \"./parseResponse\";\r\n\r\n//partially taken from http://olingo.apache.org/doc/javascript/apidoc/batch.js.html\r\nfunction parseBatchHeaders(text: string): any {\r\n    const ctx = { position: 0 };\r\n    const headers: Record<string, string> = {};\r\n    let parts: RegExpExecArray | null;\r\n    let line: string | null;\r\n    let pos: number;\r\n\r\n    do {\r\n        pos = ctx.position;\r\n        line = readLine(text, ctx);\r\n        if (!line) break; //if the line is empty, then it is the end of the headers\r\n        parts = BATCH_RESPONSE_HEADERS_REGEX.exec(line);\r\n        if (parts !== null) {\r\n            headers[parts[1].toLowerCase()] = parts[2];\r\n        } else {\r\n            // Whatever was found is not a header, so reset the context position.\r\n            ctx.position = pos;\r\n        }\r\n    } while (line && parts);\r\n\r\n    return headers;\r\n}\r\n\r\n//partially taken from http://olingo.apache.org/doc/javascript/apidoc/batch.js.html\r\nfunction readLine(text: string, ctx: { position: number }): string | null {\r\n    return readTo(text, ctx, LINE_ENDING_REGEX);\r\n}\r\n\r\n//partially taken from http://olingo.apache.org/doc/javascript/apidoc/batch.js.html\r\nfunction readTo(text: string, ctx: { position: number }, searchRegTerm: RegExp): string | null {\r\n    const start = ctx.position || 0;\r\n    const slicedText = text.slice(start);\r\n    const match = searchRegTerm.exec(slicedText);\r\n    if (!match) {\r\n        return null;\r\n    }\r\n    const end = start + match.index;\r\n    ctx.position = end + match[0].length;\r\n    return text.substring(start, end);\r\n}\r\n\r\n//partially taken from https://github.com/emiltholin/google-api-batch-utils\r\nfunction getHttpStatus(response: string) {\r\n    const parts = HTTP_STATUS_REGEX.exec(response);\r\n    //todo: add error handler for httpStatus and httpStatusMessage; remove \"!\" operator\r\n    return { httpStatusString: parts![0], httpStatus: parseInt(parts![1]), httpStatusMessage: parts![2].trim() };\r\n}\r\n\r\nfunction getPlainContent(response: string) {\r\n    // Reset the lastIndex property to ensure correct matching\r\n    HTTP_STATUS_REGEX.lastIndex = 0;\r\n\r\n    const textReg = TEXT_REGEX.exec(response.trim());\r\n    return textReg?.length ? textReg[0] : undefined;\r\n}\r\n\r\nfunction handlePlainContent(batchResponse: string, parseParams: any, requestNumber: number): any {\r\n    const plainContent = getPlainContent(batchResponse);\r\n    return handlePlainResponse(plainContent);\r\n}\r\n\r\nfunction handleEmptyContent(batchResponse: string, parseParams: any, requestNumber: number): any {\r\n    if (parseParams?.[requestNumber]?.valueIfEmpty !== undefined) {\r\n        return parseParams[requestNumber].valueIfEmpty;\r\n    } else {\r\n        const entityUrl = ODATA_ENTITYID_REGEX.exec(batchResponse);\r\n        return extractUuidFromUrl(entityUrl?.[0]) ?? undefined;\r\n    }\r\n}\r\n\r\nfunction processBatchPart(batchResponse: string, parseParams: any, requestNumber: number): any {\r\n    const { httpStatusString, httpStatus, httpStatusMessage } = getHttpStatus(batchResponse);\r\n    const responseData = batchResponse.substring(batchResponse.indexOf(\"{\"), batchResponse.lastIndexOf(\"}\") + 1);\r\n\r\n    //if the batch part does not contain a json response, parse it as plain or empty content\r\n    if (!responseData) {\r\n        if (CONTENT_TYPE_PLAIN_REGEX.test(batchResponse)) {\r\n            return handlePlainContent(batchResponse, parseParams, requestNumber);\r\n        }\r\n\r\n        return handleEmptyContent(batchResponse, parseParams, requestNumber);\r\n    }\r\n\r\n    //parse json data\r\n    const parsedResponse = handleJsonResponse(responseData, parseParams, requestNumber);\r\n\r\n    if (httpStatus < 400) {\r\n        return parsedResponse;\r\n    }\r\n\r\n    //handle error\r\n    const responseHeaders = parseBatchHeaders(\r\n        batchResponse.substring(batchResponse.indexOf(httpStatusString) + httpStatusString.length + 1, batchResponse.indexOf(\"{\"))\r\n    );\r\n\r\n    return ErrorHelper.handleHttpError(parsedResponse, {\r\n        status: httpStatus,\r\n        statusText: httpStatusMessage,\r\n        statusMessage: httpStatusMessage,\r\n        headers: responseHeaders,\r\n    });\r\n}\r\n\r\n/**\r\n *\r\n * @param {string} response - response that needs to be parsed\r\n * @param {Array} parseParams - parameters for parsing the response\r\n * @param {Number} [requestNumber] - number of the request\r\n * @returns {any} parsed batch response\r\n */\r\nexport function parseBatchResponse(response: string, parseParams: any, requestNumber: number = 0): (string | undefined | DynamicsWebApiError | Number)[] {\r\n    // Not the same delimiter in the response as we specify ourselves in the request,\r\n    // so we have to extract it.\r\n    const delimiter = response.substring(0, response.search(LINE_ENDING_REGEX));\r\n    const batchResponseParts = response.split(delimiter);\r\n    // The first part will always be an empty string. Just remove it.\r\n    batchResponseParts.shift();\r\n    // The last part will be the \"--\". Just remove it.\r\n    batchResponseParts.pop();\r\n\r\n    let result: (string | undefined | DynamicsWebApiError | Number)[] = [];\r\n    for (let part of batchResponseParts) {\r\n        if (part.indexOf(\"--changesetresponse_\") === -1) {\r\n            result.push(processBatchPart(part, parseParams, requestNumber++));\r\n            continue;\r\n        }\r\n\r\n        part = part.trim();\r\n        const batchToProcess = part.substring(part.search(LINE_ENDING_REGEX) + 1).trim();\r\n        result = result.concat(parseBatchResponse(batchToProcess, parseParams, requestNumber++));\r\n    }\r\n\r\n    return result;\r\n}\r\n", "\uFEFFimport { DWA } from \"../../dwa\";\r\nimport { getHeader, hasHeader, Utility } from \"../../utils/Utility\";\r\nimport { dateReviver } from \"./dateReviver\";\r\nimport type * as Core from \"../../types\";\r\nimport { convertToReferenceObject, extractUuidFromUrl } from \"../../helpers/Regex\";\r\nimport { parseBatchResponse } from \"./parseBatchResponse\";\r\n\r\nfunction getFormattedKeyValue(keyName: string, value: any): any[] {\r\n    let newKey: string | null = null;\r\n    if (keyName.indexOf(\"@\") !== -1) {\r\n        const format = keyName.split(\"@\");\r\n        switch (format[1]) {\r\n            case \"odata.context\":\r\n                newKey = \"oDataContext\";\r\n                break;\r\n            case \"odata.count\":\r\n                newKey = \"oDataCount\";\r\n                value = value != null ? parseInt(value) : 0;\r\n                break;\r\n            case \"odata.nextLink\":\r\n                newKey = \"oDataNextLink\";\r\n                break;\r\n            case \"odata.deltaLink\":\r\n                newKey = \"oDataDeltaLink\";\r\n                break;\r\n            case DWA.Prefer.Annotations.FormattedValue:\r\n                newKey = format[0] + \"_Formatted\";\r\n                break;\r\n            case DWA.Prefer.Annotations.AssociatedNavigationProperty:\r\n                newKey = format[0] + \"_NavigationProperty\";\r\n                break;\r\n            case DWA.Prefer.Annotations.LookupLogicalName:\r\n                newKey = format[0] + \"_LogicalName\";\r\n                break;\r\n        }\r\n    }\r\n\r\n    return [newKey, value];\r\n}\r\n\r\n/**\r\n *\r\n * @param object - parsed JSON object\r\n * @param parseParams - parameters for parsing the response\r\n * @returns parsed batch response\r\n */\r\nexport function parseData(object: Record<string, any>, parseParams?: any): any {\r\n    if (parseParams) {\r\n        if (parseParams.isRef && object[\"@odata.id\"] != null) {\r\n            return convertToReferenceObject(object);\r\n        }\r\n\r\n        if (parseParams.toCount) {\r\n            return getFormattedKeyValue(\"@odata.count\", object[\"@odata.count\"])[1] || 0;\r\n        }\r\n    }\r\n\r\n    for (const currentKey in object) {\r\n        if (object[currentKey] != null) {\r\n            if (Array.isArray(object[currentKey])) {\r\n                for (var j = 0; j < object[currentKey].length; j++) {\r\n                    object[currentKey][j] = parseData(object[currentKey][j]);\r\n                }\r\n            } else if (typeof object[currentKey] === \"object\") {\r\n                parseData(object[currentKey]);\r\n            }\r\n        }\r\n\r\n        //parse formatted values\r\n        let formattedKeyValue = getFormattedKeyValue(currentKey, object[currentKey]);\r\n        if (formattedKeyValue[0]) {\r\n            object[formattedKeyValue[0]] = formattedKeyValue[1];\r\n        }\r\n\r\n        //parse aliased values\r\n        if (currentKey.indexOf(\"_x002e_\") !== -1) {\r\n            const aliasKeys = currentKey.split(\"_x002e_\");\r\n\r\n            if (!object.hasOwnProperty(aliasKeys[0])) {\r\n                object[aliasKeys[0]] = { _dwaType: \"alias\" };\r\n            }\r\n            //throw an error if there is already a property which is not an 'alias'\r\n            else if (\r\n                typeof object[aliasKeys[0]] !== \"object\" ||\r\n                (typeof object[aliasKeys[0]] === \"object\" && !object[aliasKeys[0]].hasOwnProperty(\"_dwaType\"))\r\n            ) {\r\n                throw new Error(\"The alias name of the linked entity must be unique!\");\r\n            }\r\n\r\n            object[aliasKeys[0]][aliasKeys[1]] = object[currentKey];\r\n\r\n            //aliases also contain formatted values\r\n            formattedKeyValue = getFormattedKeyValue(aliasKeys[1], object[currentKey]);\r\n            if (formattedKeyValue[0]) {\r\n                object[aliasKeys[0]][formattedKeyValue[0]] = formattedKeyValue[1];\r\n            }\r\n        }\r\n    }\r\n\r\n    if (parseParams) {\r\n        if (parseParams.hasOwnProperty(\"pageNumber\") && object[\"@\" + DWA.Prefer.Annotations.FetchXmlPagingCookie] != null) {\r\n            object.PagingInfo = Utility.getFetchXmlPagingCookie(object[\"@\" + DWA.Prefer.Annotations.FetchXmlPagingCookie], parseParams.pageNumber);\r\n        }\r\n    }\r\n\r\n    return object;\r\n}\r\n\r\nfunction base64ToString(base64: string): string {\r\n    return global.DWA_BROWSER ? global.window.atob(base64) : Buffer.from(base64, \"base64\").toString(\"binary\");\r\n}\r\n\r\nfunction parseFileResponse(response: string, responseHeaders: any, parseParams: any): Core.FileParseResult {\r\n    let data = response;\r\n\r\n    if (parseParams?.hasOwnProperty(\"parse\")) {\r\n        data = JSON.parse(data).value;\r\n        data = base64ToString(data);\r\n    }\r\n\r\n    const parseResult: Core.FileParseResult = {\r\n        value: data,\r\n    };\r\n\r\n    if (responseHeaders[\"x-ms-file-name\"]) parseResult.fileName = responseHeaders[\"x-ms-file-name\"];\r\n    if (responseHeaders[\"x-ms-file-size\"]) parseResult.fileSize = parseInt(responseHeaders[\"x-ms-file-size\"]);\r\n    const location = getHeader(responseHeaders, \"Location\");\r\n    if (location) parseResult.location = location;\r\n\r\n    return parseResult;\r\n}\r\n\r\nfunction isBatchResponse(response: string): boolean {\r\n    return response.indexOf(\"--batchresponse_\") > -1;\r\n}\r\n\r\nfunction isFileResponse(responseHeaders: Record<string, string>): boolean {\r\n    return hasHeader(responseHeaders, \"Content-Disposition\");\r\n}\r\nfunction isJsonResponse(responseHeaders: Record<string, string>): boolean {\r\n    const contentType = getHeader(responseHeaders, \"Content-Type\");\r\n    return contentType?.startsWith(\"application/json\") == true;\r\n}\r\n\r\nfunction handleBatchResponse(response: string, parseParams: any) {\r\n    const batch = parseBatchResponse(response, parseParams);\r\n    return parseParams?.[0].convertedToBatch ? batch[0] : batch;\r\n}\r\n\r\nfunction handleFileResponse(response: string, responseHeaders: any, parseParams: any): any {\r\n    return parseFileResponse(response, responseHeaders, parseParams[0]);\r\n}\r\n\r\nexport function handleJsonResponse(response: string, parseParams: any, requestNumber: number = 0): any {\r\n    return parseData(JSON.parse(response, dateReviver), parseParams[requestNumber]);\r\n}\r\n\r\nexport function handlePlainResponse(response?: string): number | string | undefined {\r\n    const numberResponse = Number(response);\r\n    return isFinite(numberResponse) ? numberResponse : response;\r\n}\r\n\r\nfunction handleEmptyResponse(responseHeaders: Record<string, string>, parseParams: any): any {\r\n    //checking if there is a valueIfEmpty parameter and return it if it is set\r\n    if (parseParams?.[0]?.valueIfEmpty !== undefined) {\r\n        return parseParams[0].valueIfEmpty;\r\n    }\r\n    //checking if the response contains an entity id, if it does - return it\r\n    const entityUrl = getHeader(responseHeaders, \"OData-EntityId\");\r\n    if (entityUrl) {\r\n        return extractUuidFromUrl(entityUrl) ?? undefined;\r\n    }\r\n    //checking if the response is a chunk response\r\n    const location = getHeader(responseHeaders, \"Location\");\r\n    if (location) {\r\n        const result: { location: string; chunkSize?: number } = { location: location };\r\n        if (responseHeaders[\"x-ms-chunk-size\"]) {\r\n            result.chunkSize = parseInt(responseHeaders[\"x-ms-chunk-size\"]);\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * @param response - response that needs to be parsed\r\n * @param responseHeaders - response headers\r\n * @param parseParams - parameters for parsing the response\r\n * @returns parsed response\r\n */\r\nexport function parseResponse(response: string, responseHeaders: Record<string, string>, parseParams: any[]): any {\r\n    if (!response.length) {\r\n        return handleEmptyResponse(responseHeaders, parseParams);\r\n    }\r\n    if (isBatchResponse(response)) {\r\n        return handleBatchResponse(response, parseParams);\r\n    }\r\n    if (isFileResponse(responseHeaders)) {\r\n        return handleFileResponse(response, responseHeaders, parseParams);\r\n    }\r\n    if (isJsonResponse(responseHeaders)) {\r\n        return handleJsonResponse(response, parseParams);\r\n    }\r\n    return handlePlainResponse(response);\r\n}\r\n", "\uFEFFexport function parseResponseHeaders(headerStr: string): Record<string, string> {\r\n\tconst headers: Record<string, string> = {};\r\n\tif (!headerStr) {\r\n\t\treturn headers;\r\n\t}\r\n\tconst headerPairs = headerStr.split(\"\\u000d\\u000a\");\r\n\tfor (let i = 0, ilen = headerPairs.length; i < ilen; i++) {\r\n\t\tconst headerPair = headerPairs[i];\r\n\t\tconst index = headerPair.indexOf(\"\\u003a\\u0020\");\r\n\t\tif (index > 0) {\r\n\t\t\theaders[headerPair.substring(0, index)] = headerPair.substring(index + 2);\r\n\t\t}\r\n\t}\r\n\treturn headers;\r\n}\r\n", "\uFEFFimport type * as Core from \"../types\";\r\nimport { ErrorHelper } from \"./../helpers/ErrorHelper\";\r\nimport { parseResponse } from \"./helpers/parseResponse\";\r\nimport { parseResponseHeaders } from \"./helpers/parseResponseHeaders\";\r\n\r\nexport function executeRequest(options: Core.RequestOptions): Promise<Core.WebApiResponse> {\r\n    return new Promise((resolve, reject) => {\r\n        _executeRequest(options, resolve, reject);\r\n    });\r\n}\r\n\r\nfunction _executeRequest(\r\n    options: Core.RequestOptions,\r\n    successCallback: (response: Core.WebApiResponse) => void,\r\n    errorCallback: (error: Core.WebApiErrorResponse | Core.WebApiErrorResponse[]) => void\r\n) {\r\n    const data = options.data;\r\n    const headers = options.headers;\r\n    const responseParams = options.responseParams;\r\n    const signal = options.abortSignal;\r\n\r\n    if (signal?.aborted) {\r\n        errorCallback(\r\n            ErrorHelper.handleHttpError({\r\n                name: \"AbortError\",\r\n                code: 20,\r\n                message: \"The user aborted a request.\",\r\n            })\r\n        );\r\n\r\n        return;\r\n    }\r\n\r\n    let request = new XMLHttpRequest();\r\n    request.open(options.method, options.uri, options.isAsync || false);\r\n\r\n    //set additional headers\r\n    for (let key in headers) {\r\n        request.setRequestHeader(key, headers[key]);\r\n    }\r\n\r\n    request.onreadystatechange = function () {\r\n        if (request.readyState === 4) {\r\n            if (signal) signal.removeEventListener(\"abort\", abort);\r\n\r\n            switch (request.status) {\r\n                case 200: // Success with content returned in response body.\r\n                case 201: // Success with content returned in response body.\r\n                case 204: // Success with no content returned in response body.\r\n                case 206: // Success with partial content.\r\n                case 304: {\r\n                    // Success with Not Modified\r\n                    const responseHeaders = parseResponseHeaders(request.getAllResponseHeaders());\r\n                    const responseData = parseResponse(request.responseText, responseHeaders, responseParams[options.requestId]);\r\n\r\n                    const response = {\r\n                        data: responseData,\r\n                        headers: responseHeaders,\r\n                        status: request.status,\r\n                    };\r\n\r\n                    request = null as any;\r\n\r\n                    successCallback(response);\r\n                    break;\r\n                }\r\n                case 0:\r\n                    break; //response will be handled by onerror\r\n                default:\r\n                    if (!request) break; //response was handled somewhere else\r\n\r\n                    // All other statuses are error cases.\r\n                    let error;\r\n                    let headers;\r\n                    try {\r\n                        headers = parseResponseHeaders(request.getAllResponseHeaders());\r\n                        const errorParsed = parseResponse(request.responseText, headers, responseParams[options.requestId]);\r\n\r\n                        if (Array.isArray(errorParsed)) {\r\n                            errorCallback(errorParsed);\r\n                            break;\r\n                        }\r\n\r\n                        error = errorParsed.error;\r\n                    } catch (e) {\r\n                        if (request.response.length > 0) {\r\n                            error = { message: request.response };\r\n                        } else {\r\n                            error = { message: \"Unexpected Error\" };\r\n                        }\r\n                    }\r\n\r\n                    const errorParameters = {\r\n                        status: request.status,\r\n                        statusText: request.statusText,\r\n                        headers: headers,\r\n                    };\r\n\r\n                    request = null as any;\r\n\r\n                    errorCallback(ErrorHelper.handleHttpError(error, errorParameters));\r\n\r\n                    break;\r\n            }\r\n        }\r\n    };\r\n\r\n    if (options.timeout) {\r\n        request.timeout = options.timeout;\r\n    }\r\n\r\n    request.onerror = function () {\r\n        const headers = parseResponseHeaders(request.getAllResponseHeaders());\r\n        errorCallback(\r\n            ErrorHelper.handleHttpError({\r\n                status: request.status,\r\n                statusText: request.statusText,\r\n                message: request.responseText || \"Network Error\",\r\n                headers: headers,\r\n            })\r\n        );\r\n        request = null as any;\r\n    };\r\n\r\n    request.ontimeout = function () {\r\n        const headers = parseResponseHeaders(request.getAllResponseHeaders());\r\n        errorCallback(\r\n            ErrorHelper.handleHttpError({\r\n                name: \"TimeoutError\",\r\n                status: request.status,\r\n                statusText: request.statusText,\r\n                message: request.responseText || \"Request Timed Out\",\r\n                headers: headers,\r\n            })\r\n        );\r\n        request = null as any;\r\n    };\r\n\r\n    //browser abort\r\n    request.onabort = function () {\r\n        if (!request) return;\r\n\r\n        const headers = parseResponseHeaders(request.getAllResponseHeaders());\r\n        errorCallback(\r\n            ErrorHelper.handleHttpError({\r\n                status: request.status,\r\n                statusText: request.statusText,\r\n                message: \"Request aborted\",\r\n                headers: headers,\r\n            })\r\n        );\r\n        request = null as any;\r\n    };\r\n\r\n    //manual abort/cancellation\r\n    const abort = () => {\r\n        if (!request) return;\r\n\r\n        const headers = parseResponseHeaders(request.getAllResponseHeaders());\r\n\r\n        errorCallback(\r\n            ErrorHelper.handleHttpError({\r\n                name: \"AbortError\",\r\n                code: 20,\r\n                status: request.status,\r\n                statusText: request.statusText,\r\n                message: \"The user aborted a request.\",\r\n                headers: headers,\r\n            })\r\n        );\r\n\r\n        request.abort();\r\n\r\n        request = null as any;\r\n    };\r\n\r\n    if (signal) {\r\n        signal.addEventListener(\"abort\", abort);\r\n    }\r\n\r\n    data ? request.send(data) : request.send();\r\n\r\n    //called for testing\r\n    if (XhrWrapper.afterSendEvent) XhrWrapper.afterSendEvent();\r\n}\r\n\r\n/**\r\n * Sends a request to given URL with given parameters\r\n */\r\nexport class XhrWrapper {\r\n    //for testing\r\n    static afterSendEvent: () => void;\r\n}\r\n", "\uFEFFimport { ConfigurationUtility } from \"./utils/Config\";\r\nimport { Utility } from \"./utils/Utility\";\r\nimport { ErrorHelper } from \"./helpers/ErrorHelper\";\r\nimport { RequestClient } from \"./client/RequestClient\";\r\nimport type { InternalRequest, WebApiResponse } from \"./types\";\r\nimport { FETCH_XML_PAGE_REGEX, FETCH_XML_REPLACE_REGEX, FETCH_XML_TOP_REGEX, getUpdateMethod } from \"./helpers/Regex\";\r\n\r\n/**\r\n * Microsoft Dataverse Web API helper library for Node.js and Browser.\r\n * It is compatible with: Dataverse, Dynamics 365 (online), Dynamics 365 (on-premise), Dynamics CRM 2016, Dynamics CRM Online.\r\n */\r\nexport class DynamicsWebApi {\r\n    private _config = ConfigurationUtility.default();\r\n    private _isBatch = false;\r\n    private _batchRequestId: string | null = null;\r\n\r\n    /**\r\n     * Initializes a new instance of DynamicsWebApi\r\n     * @param config - Configuration object\r\n     */\r\n    constructor(config?: Config) {\r\n        ConfigurationUtility.merge(this._config, config);\r\n    }\r\n\r\n    /**\r\n\t * Merges provided configuration properties with an existing one.\r\n\t *\r\n\t * @param {DynamicsWebApi.Config} config - Configuration\r\n\t * @example\r\n\t   dynamicsWebApi.setConfig({ serverUrl: 'https://contoso.api.crm.dynamics.com/' });\r\n\t */\r\n    setConfig = (config: Config) => ConfigurationUtility.merge(this._config, config);\r\n\r\n    private _makeRequest = async (request: InternalRequest): Promise<WebApiResponse | undefined> => {\r\n        request.isBatch = this._isBatch;\r\n        if (this._batchRequestId) request.requestId = this._batchRequestId;\r\n        return RequestClient.makeRequest(request, this._config);\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to create a new record.\r\n     *\r\n     * @param {DWARequest} request - An object that represents all possible options for a current request.\r\n     * @returns {Promise} D365 Web Api Response\r\n     * @example\r\n     *const lead = {\r\n     *    subject: \"Test WebAPI\",\r\n     *    firstname: \"Test\",\r\n     *    lastname: \"WebAPI\",\r\n     *    jobtitle: \"Title\"\r\n     *};\r\n     *\r\n     *const request = {\r\n     *    data: lead,\r\n     *    collection: \"leads\",\r\n     *    returnRepresentation: true\r\n     *}\r\n     *\r\n     *const response = await dynamicsWebApi.create(request);\r\n     *\r\n     */\r\n    create = async <TData = any>(request: CreateRequest<TData>): Promise<TData> => {\r\n        ErrorHelper.parameterCheck(request, \"DynamicsWebApi.create\", \"request\");\r\n\r\n        let internalRequest: InternalRequest;\r\n\r\n        if (!(<InternalRequest>request).functionName) {\r\n            internalRequest = Utility.copyRequest(request);\r\n            internalRequest.functionName = \"create\";\r\n        } else internalRequest = <InternalRequest>request;\r\n\r\n        internalRequest.method = \"POST\";\r\n\r\n        const response = await this._makeRequest(internalRequest);\r\n\r\n        return response?.data;\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to retrieve a record.\r\n     *\r\n     * @param {DWARequest} request - An object that represents all possible options for a current request.\r\n     * @returns {Promise} D365 Web Api Response\r\n     * @example\r\n     *const request = {\r\n     *    key: '7d577253-3ef0-4a0a-bb7f-8335c2596e70',\r\n     *    collection: \"leads\",\r\n     *    select: [\"fullname\", \"subject\"],\r\n     *    ifnonematch: 'W/\"468026\"',\r\n     *    includeAnnotations: \"OData.Community.Display.V1.FormattedValue\"\r\n     *};\r\n     *\r\n     *const response = await dynamicsWebApi.retrieve(request);\r\n     */\r\n    retrieve = async <T = any>(request: RetrieveRequest): Promise<T> => {\r\n        ErrorHelper.parameterCheck(request, \"DynamicsWebApi.retrieve\", \"request\");\r\n\r\n        let internalRequest: InternalRequest;\r\n\r\n        if (!(<InternalRequest>request).functionName) {\r\n            internalRequest = Utility.copyRequest(request);\r\n            internalRequest.functionName = \"retrieve\";\r\n        } else internalRequest = request;\r\n\r\n        internalRequest.method = \"GET\";\r\n        internalRequest.responseParameters = {\r\n            isRef: internalRequest.select?.length === 1 && internalRequest.select[0].endsWith(\"/$ref\"),\r\n        };\r\n\r\n        const response = await this._makeRequest(internalRequest);\r\n        return response?.data;\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to update a record.\r\n     *\r\n     * @param {DWARequest} request - An object that represents all possible options for a current request.\r\n     * @returns {Promise} D365 Web Api Response\r\n     */\r\n    update = async <TData = any>(request: UpdateRequest<TData>): Promise<TData> => {\r\n        ErrorHelper.parameterCheck(request, \"DynamicsWebApi.update\", \"request\");\r\n\r\n        let internalRequest: InternalRequest;\r\n\r\n        if (!(<InternalRequest>request).functionName) {\r\n            internalRequest = Utility.copyRequest(request);\r\n            internalRequest.functionName = \"update\";\r\n        } else internalRequest = request;\r\n\r\n        internalRequest.method ??= getUpdateMethod(internalRequest.collection);\r\n        internalRequest.responseParameters = { valueIfEmpty: true };\r\n        internalRequest.ifmatch ??= \"*\"; //to prevent upsert\r\n\r\n        //copy locally\r\n        const ifmatch = internalRequest.ifmatch;\r\n\r\n        try {\r\n            const response = await this._makeRequest(internalRequest);\r\n            return response?.data;\r\n        } catch (error: any) {\r\n            if (ifmatch && error.status === 412) {\r\n                //precondition failed - not updated\r\n                return <any>false; //todo: check this\r\n            }\r\n            //rethrow error otherwise\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to update a single value in the record.\r\n     *\r\n     * @param request - An object that represents all possible options for a current request.\r\n     * @returns {Promise} D365 Web Api Response\r\n     */\r\n    updateSingleProperty = async <T = any>(request: UpdateSinglePropertyRequest): Promise<T> => {\r\n        ErrorHelper.parameterCheck(request, \"DynamicsWebApi.updateSingleProperty\", \"request\");\r\n        ErrorHelper.parameterCheck(request.fieldValuePair, \"DynamicsWebApi.updateSingleProperty\", \"request.fieldValuePair\");\r\n\r\n        var field = Object.keys(request.fieldValuePair)[0];\r\n        var fieldValue = request.fieldValuePair[field];\r\n\r\n        const internalRequest = Utility.copyRequest(request);\r\n        internalRequest.navigationProperty = field;\r\n        internalRequest.data = { value: fieldValue };\r\n        internalRequest.functionName = \"updateSingleProperty\";\r\n        internalRequest.method = \"PUT\";\r\n\r\n        delete internalRequest[\"fieldValuePair\"];\r\n\r\n        const response = await this._makeRequest(internalRequest);\r\n        return response?.data;\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to delete a record.\r\n     *\r\n     * @param request - An object that represents all possible options for a current request.\r\n     * @returns {Promise} D365 Web Api Response\r\n     */\r\n    deleteRecord = async (request: DeleteRequest): Promise<any> => {\r\n        ErrorHelper.parameterCheck(request, \"DynamicsWebApi.deleteRecord\", \"request\");\r\n\r\n        let internalRequest: InternalRequest;\r\n\r\n        if (!(<InternalRequest>request).functionName) {\r\n            internalRequest = Utility.copyRequest(request);\r\n            internalRequest.functionName = \"deleteRecord\";\r\n        } else internalRequest = request;\r\n\r\n        internalRequest.method = \"DELETE\";\r\n        internalRequest.responseParameters = { valueIfEmpty: true };\r\n\r\n        //copy locally\r\n        const ifmatch = internalRequest.ifmatch;\r\n\r\n        try {\r\n            const response = await this._makeRequest(internalRequest);\r\n            return response?.data;\r\n        } catch (error: any) {\r\n            if (ifmatch && error.status === 412) {\r\n                //precondition failed - not updated\r\n                return false; //todo: check this\r\n            }\r\n            //rethrow error otherwise\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to upsert a record.\r\n     *\r\n     * @param {DWARequest} request - An object that represents all possible options for a current request.\r\n     * @returns {Promise} D365 Web Api Response\r\n     */\r\n    upsert = async <TData = any>(request: UpsertRequest<TData>): Promise<TData> => {\r\n        ErrorHelper.parameterCheck(request, \"DynamicsWebApi.upsert\", \"request\");\r\n\r\n        const internalRequest = Utility.copyRequest(request);\r\n        internalRequest.method = \"PATCH\";\r\n        internalRequest.functionName = \"upsert\";\r\n\r\n        //copy locally\r\n        const ifnonematch = internalRequest.ifnonematch;\r\n        const ifmatch = internalRequest.ifmatch;\r\n        try {\r\n            const response = await this._makeRequest(internalRequest);\r\n            return response?.data;\r\n        } catch (error: any) {\r\n            if (ifnonematch && error.status === 412) {\r\n                //if prevent update\r\n                return <any>null; //todo: check this\r\n            } else if (ifmatch && error.status === 404) {\r\n                //if prevent create\r\n                return <any>null; //todo: check this\r\n            }\r\n            //rethrow error otherwise\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    private _uploadFileChunk = async (request: InternalRequest, fileBytes: Uint8Array | Buffer, chunkSize: number, offset: number = 0): Promise<void> => {\r\n        // offset = offset || 0;\r\n        Utility.setFileChunk(request, fileBytes, chunkSize, offset);\r\n\r\n        await this._makeRequest(request);\r\n\r\n        offset += chunkSize;\r\n        if (offset <= fileBytes.length) {\r\n            return this._uploadFileChunk(request, fileBytes, chunkSize, offset);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Upload file to a File Attribute\r\n     *\r\n     * @param request - An object that represents all possible options for a current request.\r\n     */\r\n    uploadFile = async (request: UploadRequest): Promise<void> => {\r\n        ErrorHelper.throwBatchIncompatible(\"DynamicsWebApi.uploadFile\", this._isBatch);\r\n        ErrorHelper.parameterCheck(request, \"DynamicsWebApi.uploadFile\", \"request\");\r\n\r\n        const internalRequest = Utility.copyRequest(request, [\"data\"]);\r\n        internalRequest.method = \"PATCH\";\r\n        internalRequest.functionName = \"uploadFile\";\r\n        internalRequest.transferMode = \"chunked\";\r\n\r\n        const response = await this._makeRequest(internalRequest);\r\n\r\n        internalRequest.url = response?.data.location;\r\n        delete internalRequest.transferMode;\r\n        delete internalRequest.fieldName;\r\n        delete internalRequest.property;\r\n        delete internalRequest.fileName;\r\n        return this._uploadFileChunk(internalRequest, request.data, response?.data.chunkSize);\r\n    };\r\n\r\n    private _downloadFileChunk = async (request: InternalRequest, bytesDownloaded: number = 0, data: string = \"\"): Promise<DownloadResponse> => {\r\n        request.range = \"bytes=\" + bytesDownloaded + \"-\" + (bytesDownloaded + Utility.downloadChunkSize - 1);\r\n        request.downloadSize = \"full\";\r\n\r\n        const response = await this._makeRequest(request);\r\n\r\n        request.url = response?.data.location;\r\n        data += response?.data.value;\r\n\r\n        bytesDownloaded += Utility.downloadChunkSize;\r\n\r\n        if (bytesDownloaded <= response?.data.fileSize) {\r\n            return this._downloadFileChunk(request, bytesDownloaded, data);\r\n        }\r\n\r\n        return {\r\n            fileName: response?.data.fileName,\r\n            fileSize: response?.data.fileSize,\r\n            data: Utility.convertToFileBuffer(data),\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Download a file from a File Attribute\r\n     * @param request - An object that represents all possible options for a current request.\r\n     */\r\n    downloadFile = (request: DownloadRequest): Promise<DownloadResponse> => {\r\n        ErrorHelper.throwBatchIncompatible(\"DynamicsWebApi.downloadFile\", this._isBatch);\r\n        ErrorHelper.parameterCheck(request, \"DynamicsWebApi.downloadFile\", \"request\");\r\n\r\n        const internalRequest = Utility.copyRequest(request);\r\n        internalRequest.method = \"GET\";\r\n        internalRequest.functionName = \"downloadFile\";\r\n        internalRequest.responseParameters = { parse: true };\r\n\r\n        return this._downloadFileChunk(internalRequest);\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to retrieve records.\r\n     *\r\n     * @param request - An object that represents all possible options for a current request.\r\n     * @param {string} [nextPageLink] - Use the value of the @odata.nextLink property with a new GET request to return the next page of data. Pass null to retrieveMultipleOptions.\r\n     * @returns {Promise} D365 Web Api Response\r\n     */\r\n    retrieveMultiple = async <T = any>(request: RetrieveMultipleRequest, nextPageLink?: string): Promise<RetrieveMultipleResponse<T>> => {\r\n        ErrorHelper.parameterCheck(request, \"DynamicsWebApi.retrieveMultiple\", \"request\");\r\n\r\n        let internalRequest: InternalRequest;\r\n\r\n        if (!(<InternalRequest>request).functionName) {\r\n            internalRequest = Utility.copyRequest(request);\r\n            internalRequest.functionName = \"retrieveMultiple\";\r\n        } else internalRequest = request;\r\n\r\n        internalRequest.method = \"GET\";\r\n\r\n        if (nextPageLink) {\r\n            ErrorHelper.stringParameterCheck(nextPageLink, \"DynamicsWebApi.retrieveMultiple\", \"nextPageLink\");\r\n            internalRequest.url = nextPageLink;\r\n        }\r\n\r\n        const response = await this._makeRequest(internalRequest);\r\n\r\n        return response?.data;\r\n    };\r\n\r\n    private _retrieveAllRequest = async <T = any>(request: RetrieveMultipleRequest, nextPageLink?: string, records: any[] = []): Promise<AllResponse<T>> => {\r\n        const response = await this.retrieveMultiple(request, nextPageLink);\r\n        records = records.concat(response.value);\r\n\r\n        const pageLink = response.oDataNextLink;\r\n\r\n        if (pageLink) {\r\n            return this._retrieveAllRequest(request, pageLink, records);\r\n        }\r\n\r\n        const result: AllResponse<T> = { value: records };\r\n\r\n        if (response.oDataDeltaLink) {\r\n            result[\"@odata.deltaLink\"] = response.oDataDeltaLink;\r\n            result.oDataDeltaLink = response.oDataDeltaLink;\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to retrieve all records.\r\n     *\r\n     * @param {DWARequest} request - An object that represents all possible options for a current request.\r\n     * @returns {Promise} D365 Web Api Response\r\n     */\r\n    retrieveAll = <T = any>(request: RetrieveMultipleRequest): Promise<AllResponse<T>> => {\r\n        ErrorHelper.throwBatchIncompatible(\"DynamicsWebApi.retrieveAll\", this._isBatch);\r\n        return this._retrieveAllRequest(request);\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to count records. IMPORTANT! The count value does not represent the total number of entities in the system. It is limited by the maximum number of entities that can be returned. Returns: Number\r\n     *\r\n     * @param request - An object that represents all possible options for a current request.\r\n     * @returns {Promise} D365 Web Api Response\r\n     */\r\n    count = async (request: CountRequest): Promise<number> => {\r\n        ErrorHelper.parameterCheck(request, \"DynamicsWebApi.count\", \"request\");\r\n\r\n        const internalRequest = Utility.copyRequest(request);\r\n        internalRequest.method = \"GET\";\r\n        internalRequest.functionName = \"count\";\r\n\r\n        if (internalRequest.filter?.length) {\r\n            internalRequest.count = true;\r\n        } else {\r\n            internalRequest.navigationProperty = \"$count\";\r\n        }\r\n\r\n        internalRequest.responseParameters = { toCount: internalRequest.count };\r\n\r\n        //if filter has not been specified then simplify the request\r\n        const response = await this._makeRequest(internalRequest);\r\n        return response?.data;\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to count records. Returns: Number\r\n     * @param request - An object that represents all possible options for a current request.\r\n     * @returns {Promise} D365 Web Api Response\r\n     */\r\n    countAll = async (request: CountAllRequest): Promise<number> => {\r\n        ErrorHelper.throwBatchIncompatible(\"DynamicsWebApi.countAll\", this._isBatch);\r\n        ErrorHelper.parameterCheck(request, \"DynamicsWebApi.countAll\", \"request\");\r\n\r\n        const response = await this._retrieveAllRequest(request);\r\n\r\n        return response ? (response.value ? response.value.length : 0) : 0;\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to execute FetchXml to retrieve records. Returns: DWA.Types.FetchXmlResponse\r\n     *\r\n     * @param request - An object that represents all possible options for a current request.\r\n     * @returns {Promise} D365 Web Api Response\r\n     */\r\n    fetch = async <T = any>(request: FetchXmlRequest): Promise<FetchXmlResponse<T>> => {\r\n        ErrorHelper.parameterCheck(request, \"DynamicsWebApi.fetch\", \"request\");\r\n\r\n        const internalRequest = Utility.copyRequest(request);\r\n        internalRequest.method = \"GET\";\r\n        internalRequest.functionName = \"fetch\";\r\n\r\n        ErrorHelper.stringParameterCheck(internalRequest.fetchXml, \"DynamicsWebApi.fetch\", \"request.fetchXml\");\r\n\r\n        //only add paging if there is no top\r\n        if (internalRequest.fetchXml && !FETCH_XML_TOP_REGEX.test(internalRequest.fetchXml)) {\r\n            let replacementString: string = \"\";\r\n\r\n            if (!FETCH_XML_PAGE_REGEX.test(internalRequest.fetchXml)) {\r\n                internalRequest.pageNumber = internalRequest.pageNumber || 1;\r\n\r\n                ErrorHelper.numberParameterCheck(internalRequest.pageNumber, \"DynamicsWebApi.fetch\", \"request.pageNumber\");\r\n                replacementString = `$1 page=\"${internalRequest.pageNumber}\"`;\r\n            }\r\n\r\n            if (internalRequest.pagingCookie != null) {\r\n                ErrorHelper.stringParameterCheck(internalRequest.pagingCookie, \"DynamicsWebApi.fetch\", \"request.pagingCookie\");\r\n                replacementString += ` paging-cookie=\"${internalRequest.pagingCookie}\"`;\r\n            }\r\n\r\n            //add page number and paging cookie to fetch xml\r\n            if (replacementString) internalRequest.fetchXml = internalRequest.fetchXml.replace(FETCH_XML_REPLACE_REGEX, replacementString);\r\n        }\r\n\r\n        internalRequest.responseParameters = { pageNumber: internalRequest.pageNumber };\r\n\r\n        const response = await this._makeRequest(internalRequest);\r\n\r\n        return response?.data;\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to execute FetchXml to retrieve all records.\r\n     *\r\n     * @param request - An object that represents all possible options for a current request.\r\n     * @returns {Promise} D365 Web Api Response\r\n     */\r\n    fetchAll = async <T = any>(request: FetchAllRequest): Promise<FetchXmlResponse<T>> => {\r\n        ErrorHelper.parameterCheck(request, \"DynamicsWebApi.fetchAll\", \"request\");\r\n\r\n        const _executeFetchXmlAll = async (request: FetchXmlRequest, records: any[] = []): Promise<FetchXmlResponse<T>> => {\r\n            // records = records || [];\r\n\r\n            const response = await this.fetch(request);\r\n\r\n            records = records.concat(response.value);\r\n\r\n            if (response.PagingInfo) {\r\n                request.pageNumber = response.PagingInfo.nextPage;\r\n                request.pagingCookie = response.PagingInfo.cookie;\r\n\r\n                return _executeFetchXmlAll(request, records);\r\n            }\r\n\r\n            return { value: records };\r\n        };\r\n\r\n        ErrorHelper.throwBatchIncompatible(\"DynamicsWebApi.fetchAll\", this._isBatch);\r\n        return _executeFetchXmlAll(request);\r\n    };\r\n\r\n    /**\r\n     * Associate for a collection-valued navigation property. (1:N or N:N)\r\n     *\r\n     * @param request - An object that represents all possible options for a current request.\r\n     * @returns {Promise} D365 Web Api Response\r\n     */\r\n    associate = async (request: AssociateRequest): Promise<void> => {\r\n        ErrorHelper.parameterCheck(request, \"DynamicsWebApi.associate\", \"request\");\r\n\r\n        const internalRequest = Utility.copyRequest(request);\r\n        internalRequest.method = \"POST\";\r\n        internalRequest.functionName = \"associate\";\r\n\r\n        ErrorHelper.stringParameterCheck(request.relatedCollection, \"DynamicsWebApi.associate\", \"request.relatedcollection\");\r\n        ErrorHelper.stringParameterCheck(request.relationshipName, \"DynamicsWebApi.associate\", \"request.relationshipName\");\r\n        const primaryKey = ErrorHelper.keyParameterCheck(request.primaryKey, \"DynamicsWebApi.associate\", \"request.primaryKey\");\r\n        const relatedKey = ErrorHelper.keyParameterCheck(request.relatedKey, \"DynamicsWebApi.associate\", \"request.relatedKey\");\r\n\r\n        internalRequest.navigationProperty = request.relationshipName + \"/$ref\";\r\n        internalRequest.key = primaryKey;\r\n        internalRequest.data = { \"@odata.id\": `${request.relatedCollection}(${relatedKey})` };\r\n\r\n        await this._makeRequest(internalRequest);\r\n    };\r\n\r\n    /**\r\n     * Disassociate for a collection-valued navigation property.\r\n     *\r\n     * @param request - An object that represents all possible options for a current request.\r\n     * @returns {Promise} D365 Web Api Response\r\n     */\r\n    disassociate = async (request: DisassociateRequest): Promise<void> => {\r\n        ErrorHelper.parameterCheck(request, \"DynamicsWebApi.disassociate\", \"request\");\r\n\r\n        const internalRequest = Utility.copyRequest(request);\r\n        internalRequest.method = \"DELETE\";\r\n        internalRequest.functionName = \"disassociate\";\r\n\r\n        ErrorHelper.stringParameterCheck(request.relationshipName, \"DynamicsWebApi.disassociate\", \"request.relationshipName\");\r\n        const primaryKey = ErrorHelper.keyParameterCheck(request.primaryKey, \"DynamicsWebApi.disassociate\", \"request.primaryKey\");\r\n        const relatedKey = ErrorHelper.keyParameterCheck(request.relatedKey, \"DynamicsWebApi.disassociate\", \"request.relatedId\");\r\n\r\n        internalRequest.key = primaryKey;\r\n        internalRequest.navigationProperty = `${request.relationshipName}(${relatedKey})/$ref`;\r\n\r\n        await this._makeRequest(internalRequest);\r\n    };\r\n\r\n    /**\r\n     * Associate for a single-valued navigation property. (1:N)\r\n     *\r\n     * @param request - An object that represents all possible options for a current request.\r\n     * @returns {Promise} D365 Web Api Response\r\n     */\r\n    associateSingleValued = async (request: AssociateSingleValuedRequest): Promise<void> => {\r\n        ErrorHelper.parameterCheck(request, \"DynamicsWebApi.associateSingleValued\", \"request\");\r\n\r\n        const internalRequest = Utility.copyRequest(request);\r\n        internalRequest.method = \"PUT\";\r\n        internalRequest.functionName = \"associateSingleValued\";\r\n\r\n        const primaryKey = ErrorHelper.keyParameterCheck(request.primaryKey, \"DynamicsWebApi.associateSingleValued\", \"request.primaryKey\");\r\n        const relatedKey = ErrorHelper.keyParameterCheck(request.relatedKey, \"DynamicsWebApi.associateSingleValued\", \"request.relatedKey\");\r\n        ErrorHelper.stringParameterCheck(request.navigationProperty, \"DynamicsWebApi.associateSingleValued\", \"request.navigationProperty\");\r\n        ErrorHelper.stringParameterCheck(request.relatedCollection, \"DynamicsWebApi.associateSingleValued\", \"request.relatedcollection\");\r\n\r\n        internalRequest.navigationProperty += \"/$ref\";\r\n        internalRequest.key = primaryKey;\r\n        internalRequest.data = { \"@odata.id\": `${request.relatedCollection}(${relatedKey})` };\r\n\r\n        await this._makeRequest(internalRequest);\r\n    };\r\n\r\n    /**\r\n     * Removes a reference to an entity for a single-valued navigation property. (1:N)\r\n     *\r\n     * @param request - An object that represents all possible options for a current request.\r\n     * @returns {Promise} D365 Web Api Response\r\n     */\r\n    disassociateSingleValued = async (request: DisassociateSingleValuedRequest): Promise<void> => {\r\n        ErrorHelper.parameterCheck(request, \"DynamicsWebApi.disassociateSingleValued\", \"request\");\r\n\r\n        const internalRequest = Utility.copyRequest(request);\r\n        internalRequest.method = \"DELETE\";\r\n        internalRequest.functionName = \"disassociateSingleValued\";\r\n\r\n        const primaryKey = ErrorHelper.keyParameterCheck(request.primaryKey, \"DynamicsWebApi.disassociateSingleValued\", \"request.primaryKey\");\r\n        ErrorHelper.stringParameterCheck(request.navigationProperty, \"DynamicsWebApi.disassociateSingleValued\", \"request.navigationProperty\");\r\n\r\n        internalRequest.navigationProperty += \"/$ref\";\r\n        internalRequest.key = primaryKey;\r\n\r\n        await this._makeRequest(internalRequest);\r\n    };\r\n\r\n    /**\r\n     * Calls a Web API function\r\n     *\r\n     * @param request - An object that represents all possible options for a current request.\r\n     * @returns {Promise} D365 Web Api Response\r\n     */\r\n    callFunction: CallFunction = async <T = any>(request: string | BoundFunctionRequest | UnboundFunctionRequest): Promise<T> => {\r\n        ErrorHelper.parameterCheck(request, `DynamicsWebApi.callFunction`, \"request\");\r\n\r\n        const getFunctionName = (request: BoundFunctionRequest | UnboundFunctionRequest) => request.name || request.functionName;\r\n\r\n        const isObject = typeof request !== \"string\";\r\n        const functionName = isObject ? getFunctionName(request) : request;\r\n        const parameterName = isObject ? \"request.name\" : \"name\";\r\n        const internalRequest: InternalRequest = isObject ? Utility.copyObject(request, [\"name\"]) : { functionName: functionName };\r\n\r\n        ErrorHelper.stringParameterCheck(functionName, `DynamicsWebApi.callFunction`, parameterName);\r\n\r\n        const functionParameters = Utility.buildFunctionParameters(internalRequest.parameters);\r\n\r\n        internalRequest.method = \"GET\";\r\n        internalRequest.addPath = functionName + functionParameters.key;\r\n        internalRequest.queryParams = functionParameters.queryParams;\r\n        internalRequest._isUnboundRequest = !internalRequest.collection;\r\n        internalRequest.functionName = \"callFunction\";\r\n\r\n        const response = await this._makeRequest(internalRequest);\r\n        return response?.data;\r\n    };\r\n\r\n    /**\r\n     * Calls a Web API action\r\n     *\r\n     * @param request - An object that represents all possible options for a current request.\r\n     * @returns {Promise} D365 Web Api Response\r\n     */\r\n    callAction: CallAction = async <TResponse = any, TAction = any>(\r\n        request: BoundActionRequest<TAction> | UnboundActionRequest<TAction>,\r\n    ): Promise<TResponse> => {\r\n        ErrorHelper.parameterCheck(request, `DynamicsWebApi.callAction`, \"request\");\r\n        ErrorHelper.stringParameterCheck(request.actionName, `DynamicsWebApi.callAction`, \"request.actionName\");\r\n\r\n        const internalRequest = Utility.copyRequest(request, [\"action\"]);\r\n        internalRequest.method = \"POST\";\r\n        internalRequest.functionName = \"callAction\";\r\n\r\n        internalRequest.addPath = request.actionName;\r\n        internalRequest._isUnboundRequest = !internalRequest.collection;\r\n        internalRequest.data = request.action;\r\n\r\n        const response = await this._makeRequest(internalRequest);\r\n        return response?.data;\r\n    };\r\n    /**\r\n     * Sends an asynchronous request to create an entity definition.\r\n     *\r\n     * @param request - An object that represents all possible options for a current request.\r\n     * @returns {Promise} D365 Web Api Response\r\n     */\r\n    createEntity = <T = any>(request: CreateEntityRequest): Promise<T> => {\r\n        ErrorHelper.parameterCheck(request, `DynamicsWebApi.createEntity`, \"request\");\r\n        ErrorHelper.parameterCheck(request.data, \"DynamicsWebApi.createEntity\", \"request.data\");\r\n\r\n        const internalRequest = Utility.copyRequest(request);\r\n        internalRequest.collection = \"EntityDefinitions\";\r\n        internalRequest.functionName = \"createEntity\";\r\n\r\n        return this.create(<CreateRequest>internalRequest);\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to update an entity definition.\r\n     *\r\n     * @param request - An object that represents all possible options for a current request.\r\n     * @returns {Promise} D365 Web Api Response\r\n     */\r\n    updateEntity = <T = any>(request: UpdateEntityRequest): Promise<T> => {\r\n        ErrorHelper.parameterCheck(request, \"DynamicsWebApi.updateEntity\", \"request\");\r\n        ErrorHelper.parameterCheck(request.data, \"DynamicsWebApi.updateEntity\", \"request.data\");\r\n        ErrorHelper.guidParameterCheck(request.data.MetadataId, \"DynamicsWebApi.updateEntity\", \"request.data.MetadataId\");\r\n\r\n        const internalRequest = Utility.copyRequest(request);\r\n        internalRequest.collection = \"EntityDefinitions\";\r\n        internalRequest.key = internalRequest.data.MetadataId;\r\n        internalRequest.functionName = \"updateEntity\";\r\n        internalRequest.method = \"PUT\";\r\n\r\n        return this.update(<UpdateRequest>internalRequest);\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to retrieve a specific entity definition.\r\n     *\r\n     * @param request - An object that represents all possible options for a current request.\r\n     * @returns {Promise} D365 Web Api Response\r\n     */\r\n    retrieveEntity = <T = any>(request: RetrieveEntityRequest): Promise<T> => {\r\n        ErrorHelper.parameterCheck(request, \"DynamicsWebApi.retrieveEntity\", \"request\");\r\n        ErrorHelper.keyParameterCheck(request.key, \"DynamicsWebApi.retrieveEntity\", \"request.key\");\r\n\r\n        const internalRequest = Utility.copyRequest(request);\r\n        internalRequest.collection = \"EntityDefinitions\";\r\n        internalRequest.functionName = \"retrieveEntity\";\r\n\r\n        return this.retrieve(<RetrieveRequest>internalRequest);\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to retrieve entity definitions.\r\n     *\r\n     * @param request - An object that represents all possible options for a current request.\r\n     * @returns {Promise} D365 Web Api Response\r\n     */\r\n    retrieveEntities = <T = any>(request?: RetrieveEntitiesRequest): Promise<RetrieveMultipleResponse<T>> => {\r\n        const internalRequest: InternalRequest = !request ? {} : Utility.copyRequest(request);\r\n\r\n        internalRequest.collection = \"EntityDefinitions\";\r\n        internalRequest.functionName = \"retrieveEntities\";\r\n\r\n        return this.retrieveMultiple(<RetrieveMultipleRequest>internalRequest);\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to create an attribute.\r\n     *\r\n     * @param request - An object that represents all possible options for a current request.\r\n     * @returns {Promise} D365 Web Api Response\r\n     */\r\n    createAttribute = <T = any>(request: CreateAttributeRequest): Promise<T> => {\r\n        ErrorHelper.parameterCheck(request, \"DynamicsWebApi.createAttribute\", \"request\");\r\n        ErrorHelper.parameterCheck(request.data, \"DynamicsWebApi.createAttribute\", \"request.data\");\r\n        ErrorHelper.keyParameterCheck(request.entityKey, \"DynamicsWebApi.createAttribute\", \"request.entityKey\");\r\n\r\n        const internalRequest = Utility.copyRequest(request);\r\n        internalRequest.collection = \"EntityDefinitions\";\r\n        internalRequest.functionName = \"retrieveEntity\";\r\n        internalRequest.navigationProperty = \"Attributes\";\r\n        internalRequest.key = request.entityKey;\r\n\r\n        return this.create(<CreateRequest>internalRequest);\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to update an attribute.\r\n     *\r\n     * @param request - An object that represents all possible options for a current request.\r\n     * @returns {Promise} D365 Web Api Response\r\n     */\r\n    updateAttribute = <T = any>(request: UpdateAttributeRequest): Promise<T> => {\r\n        ErrorHelper.parameterCheck(request, \"DynamicsWebApi.updateAttribute\", \"request\");\r\n        ErrorHelper.parameterCheck(request.data, \"DynamicsWebApi.updateAttribute\", \"request.data\");\r\n        ErrorHelper.keyParameterCheck(request.entityKey, \"DynamicsWebApi.updateAttribute\", \"request.entityKey\");\r\n        ErrorHelper.guidParameterCheck(request.data.MetadataId, \"DynamicsWebApi.updateAttribute\", \"request.data.MetadataId\");\r\n\r\n        if (request.castType) {\r\n            ErrorHelper.stringParameterCheck(request.castType, \"DynamicsWebApi.updateAttribute\", \"request.castType\");\r\n        }\r\n\r\n        const internalRequest = Utility.copyRequest(request);\r\n        internalRequest.collection = \"EntityDefinitions\";\r\n        internalRequest.navigationProperty = \"Attributes\";\r\n        internalRequest.navigationPropertyKey = request.data.MetadataId;\r\n        internalRequest.metadataAttributeType = request.castType;\r\n        internalRequest.key = request.entityKey;\r\n        internalRequest.functionName = \"updateAttribute\";\r\n        internalRequest.method = \"PUT\";\r\n\r\n        return this.update(<UpdateRequest>internalRequest);\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to retrieve attribute metadata for a specified entity definition.\r\n     *\r\n     * @param request - An object that represents all possible options for a current request.\r\n     * @returns {Promise} D365 Web Api Response\r\n     */\r\n    retrieveAttributes = <T = any>(request: RetrieveAttributesRequest): Promise<RetrieveMultipleResponse<T>> => {\r\n        ErrorHelper.parameterCheck(request, \"DynamicsWebApi.retrieveAttributes\", \"request\");\r\n        ErrorHelper.keyParameterCheck(request.entityKey, \"DynamicsWebApi.retrieveAttributes\", \"request.entityKey\");\r\n\r\n        if (request.castType) {\r\n            ErrorHelper.stringParameterCheck(request.castType, \"DynamicsWebApi.retrieveAttributes\", \"request.castType\");\r\n        }\r\n\r\n        const internalRequest = Utility.copyRequest(request);\r\n        internalRequest.collection = \"EntityDefinitions\";\r\n        internalRequest.navigationProperty = \"Attributes\";\r\n        internalRequest.metadataAttributeType = request.castType;\r\n        internalRequest.key = request.entityKey;\r\n        internalRequest.functionName = \"retrieveAttributes\";\r\n\r\n        return this.retrieveMultiple(<RetrieveMultipleRequest>internalRequest);\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to retrieve a specific attribute metadata for a specified entity definition.\r\n     *\r\n     * @param request - An object that represents all possible options for a current request.\r\n     * @returns {Promise} D365 Web Api Response\r\n     */\r\n    retrieveAttribute = <T = any>(request: RetrieveAttributeRequest): Promise<T> => {\r\n        ErrorHelper.parameterCheck(request, \"DynamicsWebApi.retrieveAttributes\", \"request\");\r\n        ErrorHelper.keyParameterCheck(request.entityKey, \"DynamicsWebApi.retrieveAttribute\", \"request.entityKey\");\r\n        ErrorHelper.keyParameterCheck(request.attributeKey, \"DynamicsWebApi.retrieveAttribute\", \"request.attributeKey\");\r\n\r\n        if (request.castType) {\r\n            ErrorHelper.stringParameterCheck(request.castType, \"DynamicsWebApi.retrieveAttribute\", \"request.castType\");\r\n        }\r\n\r\n        const internalRequest = Utility.copyRequest(request);\r\n        internalRequest.collection = \"EntityDefinitions\";\r\n        internalRequest.navigationProperty = \"Attributes\";\r\n        internalRequest.navigationPropertyKey = request.attributeKey;\r\n        internalRequest.metadataAttributeType = request.castType;\r\n        internalRequest.key = request.entityKey;\r\n        internalRequest.functionName = \"retrieveAttribute\";\r\n\r\n        return this.retrieve(<RetrieveRequest>internalRequest);\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to create a relationship definition.\r\n     *\r\n     * @param request - An object that represents all possible options for a current request.\r\n     * @returns {Promise} D365 Web Api Response\r\n     */\r\n    createRelationship = <T = any>(request: CreateRelationshipRequest): Promise<T> => {\r\n        ErrorHelper.parameterCheck(request, \"DynamicsWebApi.createRelationship\", \"request\");\r\n        ErrorHelper.parameterCheck(request.data, \"DynamicsWebApi.createRelationship\", \"request.data\");\r\n\r\n        const internalRequest = Utility.copyRequest(request);\r\n        internalRequest.collection = \"RelationshipDefinitions\";\r\n        internalRequest.functionName = \"createRelationship\";\r\n\r\n        return this.create(<CreateRequest>internalRequest);\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to update a relationship definition.\r\n     *\r\n     * @param request - An object that represents all possible options for a current request.\r\n     * @returns {Promise} D365 Web Api Response\r\n     */\r\n    updateRelationship = <T = any>(request: UpdateRelationshipRequest): Promise<T> => {\r\n        ErrorHelper.parameterCheck(request, \"DynamicsWebApi.updateRelationship\", \"request\");\r\n        ErrorHelper.parameterCheck(request.data, \"DynamicsWebApi.updateRelationship\", \"request.data\");\r\n        ErrorHelper.guidParameterCheck(request.data.MetadataId, \"DynamicsWebApi.updateRelationship\", \"request.data.MetadataId\");\r\n\r\n        if (request.castType) {\r\n            ErrorHelper.stringParameterCheck(request.castType, \"DynamicsWebApi.updateRelationship\", \"request.castType\");\r\n        }\r\n\r\n        const internalRequest = Utility.copyRequest(request);\r\n        internalRequest.collection = \"RelationshipDefinitions\";\r\n        internalRequest.key = request.data.MetadataId;\r\n        internalRequest.navigationProperty = request.castType;\r\n        internalRequest.functionName = \"updateRelationship\";\r\n        internalRequest.method = \"PUT\";\r\n\r\n        return this.update(<UpdateRequest>internalRequest);\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to delete a relationship definition.\r\n     *\r\n     * @param request - An object that represents all possible options for a current request.\r\n     * @returns {Promise} D365 Web Api Response\r\n     */\r\n    deleteRelationship = (request: DeleteRelationshipRequest): Promise<any> => {\r\n        ErrorHelper.parameterCheck(request, \"DynamicsWebApi.deleteRelationship\", \"request\");\r\n        ErrorHelper.keyParameterCheck(request.key, \"DynamicsWebApi.deleteRelationship\", \"request.key\");\r\n\r\n        const internalRequest = Utility.copyRequest(request);\r\n        internalRequest.collection = \"RelationshipDefinitions\";\r\n        internalRequest.functionName = \"deleteRelationship\";\r\n\r\n        return this.deleteRecord(<DeleteRequest>internalRequest);\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to retrieve relationship definitions.\r\n     *\r\n     * @param request - An object that represents all possible options for a current request.\r\n     * @returns {Promise} D365 Web Api Response\r\n     */\r\n    retrieveRelationships = <T = any>(request?: RetrieveRelationshipsRequest): Promise<RetrieveMultipleResponse<T>> => {\r\n        const internalRequest: InternalRequest = !request ? {} : Utility.copyRequest(request);\r\n\r\n        internalRequest.collection = \"RelationshipDefinitions\";\r\n        internalRequest.functionName = \"retrieveRelationships\";\r\n\r\n        if (request) {\r\n            if (request.castType) {\r\n                ErrorHelper.stringParameterCheck(request.castType, \"DynamicsWebApi.retrieveRelationships\", \"request.castType\");\r\n                internalRequest.navigationProperty = request.castType;\r\n            }\r\n        }\r\n\r\n        return this.retrieveMultiple(<RetrieveMultipleRequest>internalRequest);\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to retrieve a specific relationship definition.\r\n     *\r\n     * @param request - An object that represents all possible options for a current request.\r\n     * @returns {Promise} D365 Web Api Response\r\n     */\r\n    retrieveRelationship = <T = any>(request: RetrieveRelationshipRequest): Promise<T> => {\r\n        ErrorHelper.parameterCheck(request, \"DynamicsWebApi.retrieveRelationship\", \"request\");\r\n        ErrorHelper.keyParameterCheck(request.key, \"DynamicsWebApi.retrieveRelationship\", \"request.key\");\r\n\r\n        if (request.castType) {\r\n            ErrorHelper.stringParameterCheck(request.castType, \"DynamicsWebApi.retrieveRelationship\", \"request.castType\");\r\n        }\r\n\r\n        const internalRequest = Utility.copyRequest(request);\r\n        internalRequest.collection = \"RelationshipDefinitions\";\r\n        internalRequest.navigationProperty = request.castType;\r\n        internalRequest.functionName = \"retrieveRelationship\";\r\n\r\n        return this.retrieve(<RetrieveRequest>internalRequest);\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to create a Global Option Set definition\r\n     *\r\n     * @param request - An object that represents all possible options for a current request.\r\n     * @returns {Promise} D365 Web Api Response\r\n     */\r\n    createGlobalOptionSet = <T = any>(request: CreateGlobalOptionSetRequest): Promise<T> => {\r\n        ErrorHelper.parameterCheck(request, \"DynamicsWebApi.createGlobalOptionSet\", \"request\");\r\n        ErrorHelper.parameterCheck(request.data, \"DynamicsWebApi.createGlobalOptionSet\", \"request.data\");\r\n\r\n        const internalRequest = Utility.copyRequest(request);\r\n        internalRequest.collection = \"GlobalOptionSetDefinitions\";\r\n        internalRequest.functionName = \"createGlobalOptionSet\";\r\n\r\n        return this.create(<CreateRequest>internalRequest);\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to update a Global Option Set.\r\n     *\r\n     * @param request - An object that represents all possible options for a current request.\r\n     * @returns {Promise} D365 Web Api Response\r\n     */\r\n    updateGlobalOptionSet = <T = any>(request: UpdateGlobalOptionSetRequest): Promise<T> => {\r\n        ErrorHelper.parameterCheck(request, \"DynamicsWebApi.updateGlobalOptionSet\", \"request\");\r\n        ErrorHelper.parameterCheck(request.data, \"DynamicsWebApi.updateGlobalOptionSet\", \"request.data\");\r\n        ErrorHelper.guidParameterCheck(request.data.MetadataId, \"DynamicsWebApi.updateGlobalOptionSet\", \"request.data.MetadataId\");\r\n\r\n        if (request.castType) {\r\n            ErrorHelper.stringParameterCheck(request.castType, \"DynamicsWebApi.updateGlobalOptionSet\", \"request.castType\");\r\n        }\r\n\r\n        const internalRequest = Utility.copyRequest(request);\r\n        internalRequest.collection = \"GlobalOptionSetDefinitions\";\r\n        internalRequest.key = request.data.MetadataId;\r\n        internalRequest.functionName = \"updateGlobalOptionSet\";\r\n        internalRequest.method = \"PUT\";\r\n\r\n        return this.update(<UpdateRequest>internalRequest);\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to delete a Global Option Set.\r\n     *\r\n     * @param request - An object that represents all possible options for a current request.\r\n     * @returns {Promise} D365 Web Api Response\r\n     */\r\n    deleteGlobalOptionSet = (request: DeleteGlobalOptionSetRequest): Promise<any> => {\r\n        ErrorHelper.parameterCheck(request, \"DynamicsWebApi.deleteGlobalOptionSet\", \"request\");\r\n\r\n        const internalRequest = Utility.copyRequest(request);\r\n        internalRequest.collection = \"GlobalOptionSetDefinitions\";\r\n        internalRequest.functionName = \"deleteGlobalOptionSet\";\r\n\r\n        return this.deleteRecord(<DeleteRequest>internalRequest);\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to retrieve Global Option Set definitions.\r\n     *\r\n     * @param request - An object that represents all possible options for a current request.\r\n     * @returns {Promise} D365 Web Api Response\r\n     */\r\n    retrieveGlobalOptionSet = <T = any>(request: RetrieveGlobalOptionSetRequest): Promise<T> => {\r\n        ErrorHelper.parameterCheck(request, \"DynamicsWebApi.retrieveGlobalOptionSet\", \"request\");\r\n\r\n        if (request.castType) {\r\n            ErrorHelper.stringParameterCheck(request.castType, \"DynamicsWebApi.retrieveGlobalOptionSet\", \"request.castType\");\r\n        }\r\n\r\n        const internalRequest = Utility.copyRequest(request);\r\n        internalRequest.collection = \"GlobalOptionSetDefinitions\";\r\n        internalRequest.navigationProperty = request.castType;\r\n        internalRequest.functionName = \"retrieveGlobalOptionSet\";\r\n\r\n        return this.retrieve(<RetrieveRequest>internalRequest);\r\n    };\r\n\r\n    /**\r\n     * Sends an asynchronous request to retrieve Global Option Set definitions.\r\n     *\r\n     * @param request - An object that represents all possible options for a current request.\r\n     * @returns {Promise} D365 Web Api Response\r\n     */\r\n    retrieveGlobalOptionSets = <T = any>(request?: RetrieveGlobalOptionSetsRequest): Promise<RetrieveMultipleResponse<T>> => {\r\n        const internalRequest: InternalRequest = !request ? {} : Utility.copyRequest(request);\r\n\r\n        internalRequest.collection = \"GlobalOptionSetDefinitions\";\r\n        internalRequest.functionName = \"retrieveGlobalOptionSets\";\r\n\r\n        if (request?.castType) {\r\n            ErrorHelper.stringParameterCheck(request.castType, \"DynamicsWebApi.retrieveGlobalOptionSets\", \"request.castType\");\r\n            internalRequest.navigationProperty = request.castType;\r\n        }\r\n\r\n        return this.retrieveMultiple(<RetrieveMultipleRequest>internalRequest);\r\n    };\r\n\r\n    /**\r\n     * Retrieves a CSDL Document Metadata\r\n     * @param request - An object that represents all possible options for a current request.\r\n     * @returns {Promise<string>} A raw CSDL $metadata document.\r\n     */\r\n    retrieveCsdlMetadata = async (request?: CsdlMetadataRequest): Promise<string> => {\r\n        const internalRequest: InternalRequest = !request ? {} : Utility.copyRequest(request);\r\n\r\n        internalRequest.collection = \"$metadata\";\r\n        internalRequest.functionName = \"retrieveCsdlMetadata\";\r\n\r\n        if (request?.addAnnotations) {\r\n            ErrorHelper.boolParameterCheck(request.addAnnotations, \"DynamicsWebApi.retrieveCsdlMetadata\", \"request.addAnnotations\");\r\n            internalRequest.includeAnnotations = \"*\";\r\n        }\r\n\r\n        const response = await this._makeRequest(internalRequest);\r\n        return response?.data;\r\n    };\r\n\r\n    /**\r\n     * Provides a search results page.\r\n     * @param request - An object that represents all possible options for a current request.\r\n     * @returns {Promise<SearchResponse<TValue>>} Search result\r\n     */\r\n    search: SearchFunction = async <TValue = any>(request: string | SearchRequest): Promise<SearchResponse<TValue>> => {\r\n        ErrorHelper.parameterCheck(request, \"DynamicsWebApi.search\", \"request\");\r\n\r\n        const isObject = Utility.isObject(request);\r\n        const parameterName = isObject ? \"request.query.search\" : \"term\";\r\n        const internalRequest: InternalRequest = isObject ? Utility.copyObject(request) : { query: { search: request as string } };\r\n\r\n        ErrorHelper.parameterCheck(internalRequest.query, \"DynamicsWebApi.search\", \"request.query\");\r\n        ErrorHelper.stringParameterCheck(internalRequest.query.search, \"DynamicsWebApi.search\", parameterName);\r\n        ErrorHelper.maxLengthStringParameterCheck(internalRequest.query.search, \"DynamicsWebApi.search\", parameterName, 100);\r\n\r\n        internalRequest.collection = \"query\";\r\n        internalRequest.functionName = \"search\";\r\n        internalRequest.method = \"POST\";\r\n        internalRequest.data = internalRequest.query;\r\n        internalRequest.apiConfig = this._config.searchApi;\r\n\r\n        delete internalRequest.query;\r\n\r\n        const response = await this._makeRequest(internalRequest);\r\n        return response?.data;\r\n    };\r\n\r\n    /**\r\n     * Provides suggestions as the user enters text into a form field.\r\n     * @param request - An object that represents all possible options for a current request.\r\n     * @returns {Promise<SuggestResponse<TValueDocument>>} Suggestions result\r\n     */\r\n    suggest: SuggestFunction = async <TValueDocument = any>(request: string | SuggestRequest): Promise<SuggestResponse<TValueDocument>> => {\r\n        ErrorHelper.parameterCheck(request, \"DynamicsWebApi.suggest\", \"request\");\r\n\r\n        const isObject = Utility.isObject(request);\r\n        const parameterName = isObject ? \"request.query.search\" : \"term\";\r\n        const internalRequest: InternalRequest = isObject ? Utility.copyObject(request) : { query: { search: request as string } };\r\n\r\n        ErrorHelper.parameterCheck(internalRequest.query, \"DynamicsWebApi.suggest\", \"request.query\");\r\n        ErrorHelper.stringParameterCheck(internalRequest.query.search, \"DynamicsWebApi.suggest\", parameterName);\r\n        ErrorHelper.maxLengthStringParameterCheck(internalRequest.query.search, \"DynamicsWebApi.suggest\", parameterName, 100);\r\n\r\n        internalRequest.functionName = internalRequest.collection = \"suggest\";\r\n        internalRequest.method = \"POST\";\r\n        internalRequest.data = internalRequest.query;\r\n        internalRequest.apiConfig = this._config.searchApi;\r\n\r\n        delete internalRequest.query;\r\n\r\n        const response = await this._makeRequest(internalRequest);\r\n        return response?.data;\r\n    };\r\n\r\n    /**\r\n     * Provides autocompletion of input as the user enters text into a form field.\r\n     * @param request - An object that represents all possible options for a current request.\r\n     * @returns {Promise<AutocompleteResponse>} Result of autocomplete\r\n     */\r\n    autocomplete: AutocompleteFunction = async (request: string | AutocompleteRequest): Promise<AutocompleteResponse> => {\r\n        ErrorHelper.parameterCheck(request, \"DynamicsWebApi.autocomplete\", \"request\");\r\n\r\n        const isObject = Utility.isObject(request);\r\n        const parameterName = isObject ? \"request.query.search\" : \"term\";\r\n        const internalRequest: InternalRequest = isObject ? Utility.copyObject(request) : { query: { search: request as string } };\r\n\r\n        if (isObject) ErrorHelper.parameterCheck(internalRequest.query, \"DynamicsWebApi.autocomplete\", \"request.query\");\r\n        ErrorHelper.stringParameterCheck(internalRequest.query.search, `DynamicsWebApi.autocomplete`, parameterName);\r\n        ErrorHelper.maxLengthStringParameterCheck(internalRequest.query.search, \"DynamicsWebApi.autocomplete\", parameterName, 100);\r\n\r\n        internalRequest.functionName = internalRequest.collection = \"autocomplete\";\r\n        internalRequest.method = \"POST\";\r\n        internalRequest.data = internalRequest.query;\r\n        internalRequest.apiConfig = this._config.searchApi;\r\n\r\n        delete internalRequest.query;\r\n\r\n        const response = await this._makeRequest(internalRequest);\r\n        return response?.data;\r\n    };\r\n\r\n    /**\r\n     * Starts/executes a batch request.\r\n     */\r\n    startBatch = (): void => {\r\n        this._isBatch = true;\r\n        this._batchRequestId = Utility.generateUUID();\r\n    };\r\n\r\n    /**\r\n     * Executes a batch request. Please call DynamicsWebApi.startBatch() first to start a batch request.\r\n     * @param request - An object that represents all possible options for a current request.\r\n     * @returns {Promise} D365 Web Api Response\r\n     */\r\n    executeBatch = async (request?: BatchRequest): Promise<any[]> => {\r\n        ErrorHelper.throwBatchNotStarted(this._isBatch);\r\n\r\n        const internalRequest: InternalRequest = !request ? {} : Utility.copyRequest(request);\r\n\r\n        internalRequest.collection = \"$batch\";\r\n        internalRequest.method = \"POST\";\r\n        internalRequest.functionName = \"executeBatch\";\r\n        internalRequest.requestId = this._batchRequestId;\r\n\r\n        this._batchRequestId = null;\r\n        this._isBatch = false;\r\n\r\n        const response = await this._makeRequest(internalRequest);\r\n        return response?.data;\r\n    };\r\n\r\n    /**\r\n     * Creates a new instance of DynamicsWebApi. If config is not provided, it is copied from a current instance.\r\n     *\r\n     * @param {Config} config configuration object.\r\n     * @returns {DynamicsWebApi} A new instance of DynamicsWebApi\r\n     */\r\n    initializeInstance = (config?: Config): DynamicsWebApi => new DynamicsWebApi(config || this._config);\r\n\r\n    Utility = {\r\n        /**\r\n         * Searches for a collection name by provided entity name in a cached entity metadata.\r\n         * The returned collection name can be null.\r\n         *\r\n         * @param {string} entityName entity name\r\n         * @returns {string | null} collection name\r\n         */\r\n        getCollectionName: (entityName: string): string | null => RequestClient.getCollectionName(entityName),\r\n    };\r\n}\r\n\r\nexport interface Expand {\r\n    /**An Array(of Strings) representing the $select OData System Query Option to control which attributes will be returned. */\r\n    select?: string[];\r\n    /**Use the $filter system query option to set criteria for which entities will be returned. */\r\n    filter?: string;\r\n    /**Limit the number of results returned by using the $top system query option.Do not use $top with $count! */\r\n    top?: number;\r\n    /**An Array(of Strings) representing the order in which items are returned using the $orderby system query option.Use the asc or desc suffix to specify ascending or descending order respectively.The default is ascending if the suffix isn't applied. */\r\n    orderBy?: string[];\r\n    /**A name of a single-valued navigation property which needs to be expanded. */\r\n    property?: string;\r\n    /**An Array of Expand Objects representing the $expand Query Option value to control which related records need to be returned. */\r\n    expand?: Expand[];\r\n}\r\n\r\nexport interface BaseRequest {\r\n    /**XHR requests only! Indicates whether the requests should be made synchronously or asynchronously.Default value is 'true'(asynchronously). */\r\n    async?: boolean;\r\n    /**Impersonates a user based on their systemuserid by adding \"MSCRMCallerID\" header. A String representing the GUID value for the Dynamics 365 systemuserid. */\r\n    impersonate?: string;\r\n    /**Impersonates a user based on their Azure Active Directory (AAD) object id by passing that value along with the header \"CallerObjectId\". A String should represent a GUID value. */\r\n    impersonateAAD?: string;\r\n    /**If set to 'true', DynamicsWebApi adds a request header 'Cache-Control: no-cache'.Default value is 'false'. */\r\n    noCache?: boolean;\r\n    /** Authorization Token. If set, onTokenRefresh will not be called. */\r\n    token?: string;\r\n    /**Sets a number of milliseconds before a request times out. */\r\n    timeout?: number;\r\n    /**The AbortSignal interface represents a signal object that allows you to communicate with a DOM request and abort it if required via an AbortController object. */\r\n    signal?: AbortSignal;\r\n    /**Indicates if an operation must be included in a Change Set or not. Works in Batch Operations only. By default, it's \"true\", except for GET operations - they are not allowed in Change Sets. */\r\n    inChangeSet?: boolean;\r\n    /**Headers to supply with a request. These headers will override configuraiton headers if the identical ones were set. */\r\n    headers?: HeaderCollection;\r\n    /**Custom query parameters. Can be used to set parameter aliases for \"$filter\" and \"$orderBy\". Important! These parameters ARE NOT URI encoded! */\r\n    queryParams?: string[];\r\n}\r\n\r\nexport interface BatchRequest extends BaseRequest {\r\n    /** Sets Prefer header to \"odata.continue-on-error\" that allows more requests be processed when errors occur. The batch request will return '200 OK' and individual response errors will be returned in the batch response body. */\r\n    continueOnError?: boolean;\r\n}\r\n\r\nexport interface Request extends BaseRequest {\r\n    /**A name of the Entity Collection or Entity Logical name. */\r\n    collection?: string;\r\n}\r\n\r\nexport interface CRUDRequest extends Request {\r\n    /**A String representing collection record's Primary Key (GUID) or Alternate Key(s). */\r\n    key?: string;\r\n}\r\n\r\nexport interface CountRequest extends Request {\r\n    /**Use the $filter system query option to set criteria for which entities will be returned. */\r\n    filter?: string;\r\n}\r\n\r\nexport interface CountAllRequest extends CountRequest {\r\n    /**A name of the Entity Collection or Entity Logical name. */\r\n    collection: string;\r\n    /**An Array (of strings) representing the $select OData System Query Option to control which attributes will be returned. */\r\n    select?: string[];\r\n}\r\n\r\nexport interface FetchAllRequest extends Request {\r\n    /**Sets FetchXML - a proprietary query language that provides capabilities to perform aggregation. */\r\n    fetchXml: string;\r\n    /**Sets Prefer header with value \"odata.include-annotations=\" and the specified annotation. Annotations provide additional information about lookups, options sets and other complex attribute types. For example: * or Microsoft.Dynamics.CRM.fetchxmlpagingcookie */\r\n    includeAnnotations?: string;\r\n}\r\n\r\nexport interface FetchXmlRequest extends FetchAllRequest {\r\n    /**Page number. */\r\n    pageNumber?: number;\r\n    /**Paging cookie. To retrive the first page, pagingCookie must be null. */\r\n    pagingCookie?: string;\r\n}\r\n\r\nexport interface CreateRequest<T = any> extends CRUDRequest {\r\n    /**If set to true, the request bypasses custom business logic, all synchronous plug-ins and real-time workflows are disabled. Check for special exceptions in Microsft Docs. */\r\n    bypassCustomPluginExecution?: boolean;\r\n    /**Web API v9+ only! Boolean that enables duplicate detection. */\r\n    duplicateDetection?: boolean;\r\n    /**A JavaScript object with properties corresponding to the logical name of entity attributes(exceptions are lookups and single-valued navigation properties). */\r\n    data?: T;\r\n    /**An array of Expand Objects(described below the table) representing the $expand OData System Query Option value to control which related records are also returned. */\r\n    expand?: Expand[];\r\n    /**Sets Prefer header with value \"odata.include-annotations=\" and the specified annotation.Annotations provide additional information about lookups, options sets and other complex attribute types. */\r\n    includeAnnotations?: string;\r\n    /**A String representing the name of a single - valued navigation property. Useful when needed to retrieve information about a related record in a single request. */\r\n    navigationProperty?: string;\r\n    /**A String representing navigation property's Primary Key (GUID) or Alternate Key(s). (For example, to retrieve Attribute Metadata). */\r\n    navigationPropertyKey?: string;\r\n    /**An Array(of Strings) representing the $select OData System Query Option to control which attributes will be returned. */\r\n    select?: string[];\r\n    /**Sets Prefer header request with value \"return=representation\".Use this property to return just created or updated entity in a single request. */\r\n    returnRepresentation?: boolean;\r\n    /**BATCH REQUESTS ONLY! Sets Content-ID header or references request in a Change Set. */\r\n    contentId?: string;\r\n    /**A unique partition key value of a logical partition for non-relational custom entity data stored in NoSql tables of Azure heterogenous storage. */\r\n    partitionId?: string;\r\n}\r\n\r\nexport interface UpdateRequestBase<T = any> extends CRUDRequest {\r\n    /**If set to true, the request bypasses custom business logic, all synchronous plug-ins and real-time workflows are disabled. Check for special exceptions in Microsft Docs. */\r\n    bypassCustomPluginExecution?: boolean;\r\n    /**Web API v9+ only! Boolean that enables duplicate detection. */\r\n    duplicateDetection?: boolean;\r\n    /**A JavaScript object with properties corresponding to the logical name of entity attributes(exceptions are lookups and single-valued navigation properties). */\r\n    data?: T;\r\n    /**An array of Expand Objects(described below the table) representing the $expand OData System Query Option value to control which related records are also returned. */\r\n    expand?: Expand[];\r\n    /**Sets If-Match header value that enables to use conditional retrieval or optimistic concurrency in applicable requests.*/\r\n    ifmatch?: string;\r\n    /**Sets Prefer header with value \"odata.include-annotations=\" and the specified annotation.Annotations provide additional information about lookups, options sets and other complex attribute types. */\r\n    includeAnnotations?: string;\r\n    /**Sets Prefer header request with value \"return=representation\".Use this property to return just created or updated entity in a single request. */\r\n    returnRepresentation?: boolean;\r\n    /**An Array(of Strings) representing the $select OData System Query Option to control which attributes will be returned. */\r\n    select?: string[];\r\n    /**BATCH REQUESTS ONLY! Sets Content-ID header or references request in a Change Set. */\r\n    contentId?: string;\r\n    /**Casts the AttributeMetadata to a specific type. (Used in requests to Attribute Metadata). */\r\n    metadataAttributeType?: string;\r\n    /**A String representing the name of a single - valued navigation property. Useful when needed to retrieve information about a related record in a single request. */\r\n    navigationProperty?: string;\r\n    /**A String representing navigation property's Primary Key (GUID) or Alternate Key(s). (For example, to retrieve Attribute Metadata). */\r\n    navigationPropertyKey?: string;\r\n    /**A unique partition key value of a logical partition for non-relational custom entity data stored in NoSql tables of Azure heterogenous storage. */\r\n    partitionId?: string;\r\n}\r\n\r\nexport interface UpdateRequest<T = any> extends UpdateRequestBase<T> {\r\n    /**If set to 'true', DynamicsWebApi adds a request header 'MSCRM.MergeLabels: true'. Default value is 'false' */\r\n    mergeLabels?: boolean;\r\n}\r\n\r\nexport interface UpdateSinglePropertyRequest extends CRUDRequest {\r\n    /**Object with a logical name of the field as a key and a value to update with. Example: {subject: \"Update Record\"} */\r\n    fieldValuePair: { [key: string]: any };\r\n    /**An array of Expand Objects(described below the table) representing the $expand OData System Query Option value to control which related records are also returned. */\r\n    expand?: Expand[];\r\n    /**Sets If-Match header value that enables to use conditional retrieval or optimistic concurrency in applicable requests.*/\r\n    ifmatch?: string;\r\n    /**Sets Prefer header with value \"odata.include-annotations=\" and the specified annotation.Annotations provide additional information about lookups, options sets and other complex attribute types. */\r\n    includeAnnotations?: string;\r\n    /**Sets Prefer header request with value \"return=representation\".Use this property to return just created or updated entity in a single request. */\r\n    returnRepresentation?: boolean;\r\n    /**An Array(of Strings) representing the $select OData System Query Option to control which attributes will be returned. */\r\n    select?: string[];\r\n    /**BATCH REQUESTS ONLY! Sets Content-ID header or references request in a Change Set. */\r\n    contentId?: string;\r\n}\r\n\r\nexport interface UpsertRequest<T = any> extends UpdateRequestBase<T> {\r\n    /**Sets If-None-Match header value that enables to use conditional retrieval in applicable requests. */\r\n    ifnonematch?: string;\r\n}\r\n\r\nexport interface DeleteRequest extends CRUDRequest {\r\n    /**If set to true, the request bypasses custom business logic, all synchronous plug-ins and real-time workflows are disabled. Check for special exceptions in Microsft Docs. */\r\n    bypassCustomPluginExecution?: boolean;\r\n    /**Sets If-Match header value that enables to use conditional retrieval or optimistic concurrency in applicable requests.*/\r\n    ifmatch?: string;\r\n    /**BATCH REQUESTS ONLY! Sets Content-ID header or references request in a Change Set. */\r\n    contentId?: string;\r\n    /**\r\n     * Field name that needs to be cleared (for example File Field)\r\n     * @deprecated Use \"property\".\r\n     */\r\n    fieldName?: string;\r\n    /**Single property that needs to be cleared (including the File property) */\r\n    property?: string;\r\n}\r\n\r\nexport interface RetrieveRequest extends CRUDRequest {\r\n    /**A name of the Entity Collection or Entity Logical name. */\r\n    collection: string;\r\n    /**An array of Expand Objects(described below the table) representing the $expand OData System Query Option value to control which related records are also returned. */\r\n    expand?: Expand[];\r\n    /**Sets If-Match header value that enables to use conditional retrieval or optimistic concurrency in applicable requests.*/\r\n    ifmatch?: string;\r\n    /**Sets If-None-Match header value that enables to use conditional retrieval in applicable requests. */\r\n    ifnonematch?: string;\r\n    /**Sets Prefer header with value \"odata.include-annotations=\" and the specified annotation.Annotations provide additional information about lookups, options sets and other complex attribute types. */\r\n    includeAnnotations?: string;\r\n    /**Casts the AttributeMetadata to a specific type. (Used in requests to Attribute Metadata). */\r\n    metadataAttributeType?: string;\r\n    /**A String representing the name of a single - valued navigation property. Useful when needed to retrieve information about a related record in a single request. */\r\n    navigationProperty?: string;\r\n    /**A String representing navigation property's Primary Key (GUID) or Alternate Key(s). (For example, to retrieve Attribute Metadata). */\r\n    navigationPropertyKey?: string;\r\n    /**A String representing the GUID value of the saved query. */\r\n    savedQuery?: string;\r\n    /**An Array(of Strings) representing the $select OData System Query Option to control which attributes will be returned. */\r\n    select?: string[];\r\n    /**A String representing the GUID value of the user query. */\r\n    userQuery?: string;\r\n    /**A unique partition key value of a logical partition for non-relational custom entity data stored in NoSql tables of Azure heterogenous storage. */\r\n    partitionId?: string;\r\n}\r\n\r\nexport interface RetrieveMultipleRequest extends Request {\r\n    /**A name of the Entity Collection or Entity Logical name. */\r\n    collection: string;\r\n    /**Use the $apply to aggregate and group your data dynamically */\r\n    apply?: string;\r\n    /**An array of Expand Objects(described below the table) representing the $expand OData System Query Option value to control which related records are also returned. */\r\n    expand?: Expand[];\r\n    /**Boolean that sets the $count system query option with a value of true to include a count of entities that match the filter criteria up to 5000(per page).Do not use $top with $count! */\r\n    count?: boolean;\r\n    /**Use the $filter system query option to set criteria for which entities will be returned. */\r\n    filter?: string;\r\n    /**Sets Prefer header with value \"odata.include-annotations=\" and the specified annotation.Annotations provide additional information about lookups, options sets and other complex attribute types. */\r\n    includeAnnotations?: string;\r\n    /**Sets the odata.maxpagesize preference value to request the number of entities returned in the response. */\r\n    maxPageSize?: number;\r\n    /**An Array(of string) representing the order in which items are returned using the $orderby system query option.Use the asc or desc suffix to specify ascending or descending order respectively.The default is ascending if the suffix isn't applied. */\r\n    orderBy?: string[];\r\n    /**An Array(of Strings) representing the $select OData System Query Option to control which attributes will be returned. */\r\n    select?: string[];\r\n    /**Limit the number of results returned by using the $top system query option.Do not use $top with $count! */\r\n    top?: number;\r\n    /**Sets Prefer header with value 'odata.track-changes' to request that a delta link be returned which can subsequently be used to retrieve entity changes. */\r\n    trackChanges?: boolean;\r\n    /**A unique partition key value of a logical partition for non-relational custom entity data stored in NoSql tables of Azure heterogenous storage. */\r\n    partitionId?: string;\r\n}\r\n\r\nexport interface AssociateRequest extends Request {\r\n    /**Primary entity record id/key. */\r\n    primaryKey: string;\r\n    /**Relationship name. */\r\n    relationshipName: string;\r\n    /**Related name of the Entity Collection or Entity Logical name. */\r\n    relatedCollection: string;\r\n    /**Related entity record id/key. */\r\n    relatedKey: string;\r\n}\r\n\r\nexport interface AssociateSingleValuedRequest extends Request {\r\n    /**Primary entity record id/key. */\r\n    primaryKey: string;\r\n    /**Navigation property name. */\r\n    navigationProperty: string;\r\n    /**Related name of the Entity Collection or Entity Logical name. */\r\n    relatedCollection: string;\r\n    /**Related entity record id/key. */\r\n    relatedKey: string;\r\n}\r\n\r\nexport interface DisassociateRequest extends Request {\r\n    /**Primary entity record id/key. */\r\n    primaryKey: string;\r\n    /**Relationship name. */\r\n    relationshipName: string;\r\n    /**Related entity record id/key. */\r\n    relatedKey: string;\r\n}\r\n\r\nexport interface DisassociateSingleValuedRequest extends Request {\r\n    /**Primary entity record id/key. */\r\n    primaryKey: string;\r\n    /**Navigation property name. */\r\n    navigationProperty: string;\r\n}\r\n\r\nexport interface UnboundFunctionRequest extends BaseRequest {\r\n    /**\r\n     * Name of the function.\r\n     */\r\n    name?: string;\r\n    /**\r\n     * Name of the function.\r\n     * @deprecated Use \"name\" parameter.\r\n     */\r\n    functionName?: string;\r\n    /**Function's input parameters. Example: { param1: \"test\", param2: 3 }. */\r\n    parameters?: any;\r\n    /**An Array(of Strings) representing the $select OData System Query Option to control which attributes will be returned. */\r\n    select?: string[];\r\n    /**Use the $filter system query option to set criteria for which entities will be returned. */\r\n    filter?: string;\r\n}\r\n\r\nexport interface BoundFunctionRequest extends UnboundFunctionRequest, Request {\r\n    /**A String representing the GUID value for the record. */\r\n    key?: string;\r\n}\r\n\r\nexport interface UnboundActionRequest<TAction = any> extends BaseRequest {\r\n    /**A name of the Web API action. */\r\n    actionName: string;\r\n    /**An object that represents a Dynamics 365 action. */\r\n    action?: TAction;\r\n}\r\n\r\nexport interface BoundActionRequest<TAction = any> extends UnboundActionRequest<TAction>, Request {\r\n    /**A String representing the GUID value for the record. */\r\n    key?: string;\r\n}\r\n\r\nexport interface CreateEntityRequest extends BaseRequest {\r\n    /**An object with properties corresponding to the logical name of entity attributes(exceptions are lookups and single-valued navigation properties). */\r\n    data: any;\r\n}\r\n\r\nexport interface UpdateEntityRequest extends CRUDRequest {\r\n    /**An object with properties corresponding to the logical name of entity attributes(exceptions are lookups and single-valued navigation properties). */\r\n    data: any;\r\n    /**Sets MSCRM.MergeLabels header that controls whether to overwrite the existing labels or merge your new label with any existing language labels. Default value is false. */\r\n    mergeLabels?: boolean;\r\n}\r\n\r\nexport interface RetrieveEntityRequest extends BaseRequest {\r\n    /**An Entity MetadataId or Alternate Key (such as LogicalName). */\r\n    key: string;\r\n    /**An Array(of Strings) representing the $select OData System Query Option to control which attributes will be returned. */\r\n    select?: string[];\r\n    /**An array of Expand Objects(described below the table) representing the $expand OData System Query Option value to control which related records are also returned. */\r\n    expand?: Expand[];\r\n}\r\n\r\nexport interface RetrieveEntitiesRequest extends BaseRequest {\r\n    /**An Array(of Strings) representing the $select OData System Query Option to control which attributes will be returned. */\r\n    select?: string[];\r\n    /**Use the $filter system query option to set criteria for which entities will be returned. */\r\n    filter?: string;\r\n    /**An array of Expand Objects(described below the table) representing the $expand OData System Query Option value to control which related records are also returned. */\r\n    expand?: Expand[];\r\n}\r\n\r\nexport interface CreateAttributeRequest extends BaseRequest {\r\n    /**An Entity MetadataId or Alternate Key (such as LogicalName). */\r\n    entityKey: string;\r\n    /**Attribute metadata object. */\r\n    data: any;\r\n}\r\n\r\nexport interface UpdateAttributeRequest extends CreateAttributeRequest {\r\n    /**Use this parameter to cast the Attribute to a specific type. */\r\n    castType?: string;\r\n    /**Sets MSCRM.MergeLabels header that controls whether to overwrite the existing labels or merge your new label with any existing language labels. Default value is false. */\r\n    mergeLabels?: boolean;\r\n}\r\n\r\nexport interface RetrieveAttributesRequest extends BaseRequest {\r\n    /**An Entity MetadataId or Alternate Key (such as LogicalName). */\r\n    entityKey: string;\r\n    /**Use this parameter to cast the Attribute to a specific type. */\r\n    castType?: string;\r\n    /**An Array(of Strings) representing the $select OData System Query Option to control which attributes will be returned. */\r\n    select?: string[];\r\n    /**Use the $filter system query option to set criteria for which entities will be returned. */\r\n    filter?: string;\r\n    /**An array of Expand Objects(described below the table) representing the $expand OData System Query Option value to control which related records are also returned. */\r\n    expand?: Expand[];\r\n}\r\n\r\nexport interface RetrieveAttributeRequest extends BaseRequest {\r\n    /**An Attribute MetadataId or Alternate Key (such as LogicalName). */\r\n    attributeKey: string;\r\n    /**An Entity MetadataId or Alternate Key (such as LogicalName). */\r\n    entityKey: string;\r\n    /**Use this parameter to cast the Attribute to a specific type. */\r\n    castType?: string;\r\n    /**An Array(of Strings) representing the $select OData System Query Option to control which attributes will be returned. */\r\n    select?: string[];\r\n    /**An array of Expand Objects(described below the table) representing the $expand OData System Query Option value to control which related records are also returned. */\r\n    expand?: Expand[];\r\n}\r\n\r\nexport interface CreateRelationshipRequest extends BaseRequest {\r\n    /**Relationship Definition. */\r\n    data: any;\r\n}\r\n\r\nexport interface UpdateRelationshipRequest extends CreateRelationshipRequest {\r\n    /**Use this parameter to cast the Relationship metadata to a specific type. */\r\n    castType?: string;\r\n    /**Sets MSCRM.MergeLabels header that controls whether to overwrite the existing labels or merge your new label with any existing language labels. Default value is false. */\r\n    mergeLabels?: boolean;\r\n}\r\n\r\nexport interface DeleteRelationshipRequest extends BaseRequest {\r\n    /**A Relationship MetadataId or Alternate Key (such as LogicalName). */\r\n    key: string;\r\n}\r\n\r\nexport interface RetrieveRelationshipsRequest extends BaseRequest {\r\n    /**Use this parameter to cast the Relationship metadata to a specific type. */\r\n    castType?: string;\r\n    /**An Array(of Strings) representing the $select OData System Query Option to control which attributes will be returned. */\r\n    select?: string[];\r\n    /**Use the $filter system query option to set criteria for which entities will be returned. */\r\n    filter?: string;\r\n    /**An array of Expand Objects(described below the table) representing the $expand OData System Query Option value to control which related records are also returned. */\r\n    expand?: Expand[];\r\n}\r\n\r\nexport interface RetrieveRelationshipRequest extends BaseRequest {\r\n    /**A Relationship MetadataId or Alternate Key (such as LogicalName). */\r\n    key: string;\r\n    /**Use this parameter to cast the Relationship metadata to a specific type. */\r\n    castType?: string;\r\n    /**An Array(of Strings) representing the $select OData System Query Option to control which attributes will be returned. */\r\n    select?: string[];\r\n    /**An array of Expand Objects(described below the table) representing the $expand OData System Query Option value to control which related records are also returned. */\r\n    expand?: Expand[];\r\n}\r\n\r\nexport interface CreateGlobalOptionSetRequest extends BaseRequest {\r\n    /**Global Option Set Definition. */\r\n    data: any;\r\n}\r\n\r\nexport interface UpdateGlobalOptionSetRequest extends CreateRelationshipRequest {\r\n    /**Use this parameter to cast the Global Option Set metadata to a specific type. */\r\n    castType?: string;\r\n    /**Sets MSCRM.MergeLabels header that controls whether to overwrite the existing labels or merge your new label with any existing language labels. Default value is false. */\r\n    mergeLabels?: boolean;\r\n}\r\n\r\nexport interface DeleteGlobalOptionSetRequest extends BaseRequest {\r\n    /**A Global Option Set MetadataId or Alternate Key (such as LogicalName). */\r\n    key: string;\r\n}\r\n\r\nexport interface RetrieveGlobalOptionSetsRequest extends BaseRequest {\r\n    /**Use this parameter to cast the Global Option Set metadata to a specific type. */\r\n    castType?: string;\r\n    /**An Array(of Strings) representing the $select OData System Query Option to control which attributes will be returned. */\r\n    select?: string[];\r\n    /**Use the $filter system query option to set criteria for which entities will be returned. */\r\n    filter?: string;\r\n    /**An array of Expand Objects(described below the table) representing the $expand OData System Query Option value to control which related records are also returned. */\r\n    expand?: Expand[];\r\n}\r\n\r\nexport interface RetrieveGlobalOptionSetRequest extends BaseRequest {\r\n    /**A Global Option Set MetadataId or Alternate Key (such as LogicalName). */\r\n    key: string;\r\n    /**Use this parameter to cast the Global Option Set metadata to a specific type. */\r\n    castType?: string;\r\n    /**An Array(of Strings) representing the $select OData System Query Option to control which attributes will be returned. */\r\n    select?: string[];\r\n    /**An array of Expand Objects(described below the table) representing the $expand OData System Query Option value to control which related records are also returned. */\r\n    expand?: Expand[];\r\n}\r\n\r\nexport interface UploadRequest extends CRUDRequest {\r\n    /**Binary Buffer*/\r\n    data: Uint8Array | Buffer;\r\n    /**Name of the file */\r\n    fileName: string;\r\n    /**The name of File Column (field) */\r\n    property?: string;\r\n    /**\r\n     * File Field Name\r\n     * @deprecated Use \"property\".\r\n     */\r\n    fieldName?: string;\r\n}\r\n\r\nexport interface DownloadRequest extends CRUDRequest {\r\n    /**The name of File Column (field) */\r\n    property?: string;\r\n    /**\r\n     * File Field Name\r\n     * @deprecated Use \"property\".\r\n     */\r\n    fieldName?: string;\r\n}\r\n\r\nexport interface CsdlMetadataRequest extends BaseRequest {\r\n    /**If set to \"true\" the document will include many different kinds of annotations that can be useful. Most annotations are not included by default because they increase the total size of the document. */\r\n    addAnnotations?: boolean;\r\n}\r\n\r\nexport type SearchMode = \"any\" | \"all\";\r\nexport type SearchType = \"simple\" | \"full\";\r\n\r\nexport interface SearchQueryBase {\r\n    /**The search parameter value contains the term to be searched for and has a 100-character limit. For suggestions, min 3 characters in addition. */\r\n    search: string;\r\n    /**The default table list searches across all Dataverse search\u2013configured tables and columns. The default list is configured by your administrator when Dataverse search is enabled. */\r\n    entities?: string[];\r\n    /**Filters are applied while searching data and are specified in standard OData syntax. */\r\n    filter?: string;\r\n}\r\n\r\nexport interface Search extends SearchQueryBase {\r\n    /**Facets support the ability to drill down into data results after they've been retrieved. */\r\n    facets?: string[];\r\n    /**Specify true to return the total record count; otherwise false. The default is false. */\r\n    returnTotalRecordCount?: boolean;\r\n    /**Specifies the number of search results to skip. */\r\n    skip?: number;\r\n    /**Specifies the number of search results to retrieve. The default is 50, and the maximum value is 100. */\r\n    top?: number;\r\n    /**A list of comma-separated clauses where each clause consists of a column name followed by 'asc' (ascending, which is the default) or 'desc' (descending). This list specifies how to order the results in order of precedence. */\r\n    orderBy?: string[];\r\n    /**Specifies whether any or all the search terms must be matched to count the document as a match. The default is 'any'. */\r\n    searchMode?: SearchMode;\r\n    /**The search type specifies the syntax of a search query. Using 'simple' selects simple query syntax and 'full' selects Lucene query syntax. The default is 'simple'. */\r\n    searchType?: SearchType;\r\n}\r\n\r\nexport interface Suggest extends SearchQueryBase {\r\n    /**Use fuzzy search to aid with misspellings. The default is false. */\r\n    useFuzzy?: boolean;\r\n    /**Number of suggestions to retrieve. The default is 5. */\r\n    top?: number;\r\n    /**A list of comma-separated clauses where each clause consists of a column name followed by 'asc' (ascending, which is the default) or 'desc' (descending). This list specifies how to order the results in order of precedence. */\r\n    orderBy?: string[];\r\n}\r\n\r\nexport interface Autocomplete extends SearchQueryBase {\r\n    /**Use fuzzy search to aid with misspellings. The default is false. */\r\n    useFuzzy?: boolean;\r\n}\r\n\r\nexport interface SearchRequest extends BaseRequest {\r\n    /**Search query object */\r\n    query: Search;\r\n}\r\n\r\nexport interface SuggestRequest extends BaseRequest {\r\n    /**Suggestion query object */\r\n    query: Suggest;\r\n}\r\n\r\nexport interface AutocompleteRequest extends BaseRequest {\r\n    /**Autocomplete query object */\r\n    query: Autocomplete;\r\n}\r\n\r\nexport interface ApiConfig {\r\n    /** API Version to use, for example: \"9.2\" or \"1.0\" */\r\n    version?: string;\r\n    /** API Path, for example: \"data\" or \"search\" */\r\n    path?: string;\r\n}\r\n\r\nexport interface AccessToken {\r\n    /** Access Token */\r\n    accessToken: string;\r\n}\r\n\r\nexport interface Config {\r\n    /**The url to Dataverse API server, for example: https://contoso.api.crm.dynamics.com/. It is required when used in Node.js application. */\r\n    serverUrl?: string | null;\r\n    /**Impersonates a user based on their systemuserid by adding \"MSCRMCallerID\" header. A String representing the GUID value for the Dynamics 365 systemuserid. */\r\n    impersonate?: string | null;\r\n    /**Impersonates a user based on their Azure Active Directory (AAD) object id by passing that value along with the header \"CallerObjectId\". A String should represent a GUID value. */\r\n    impersonateAAD?: string | null;\r\n    /**A function that is called when a security token needs to be refreshed. */\r\n    onTokenRefresh?: (() => Promise<AccessToken | string | null>) | null;\r\n    /**Sets Prefer header with value \"odata.include-annotations=\" and the specified annotation.Annotations provide additional information about lookups, options sets and other complex attribute types.*/\r\n    includeAnnotations?: string | null;\r\n    /**Sets the odata.maxpagesize preference value to request the number of entities returned in the response. */\r\n    maxPageSize?: number | null;\r\n    /**Sets Prefer header request with value \"return=representation\".Use this property to return just created or updated entity in a single request.*/\r\n    returnRepresentation?: boolean | null;\r\n    /**Indicates whether to use Entity Logical Names instead of Collection Logical Names.*/\r\n    useEntityNames?: boolean | null;\r\n    /**Sets a number of milliseconds before a request times out. */\r\n    timeout?: number | null;\r\n    /**Proxy configuration object. */\r\n    proxy?: ProxyConfig | null;\r\n    /**Configuration object for Dataverse Web API (with path \"data\"). */\r\n    dataApi?: ApiConfig;\r\n    /**Configuration object for Dataverse Search API (with path \"search\"). */\r\n    searchApi?: ApiConfig;\r\n    /**Default headers to supply with each request. */\r\n    headers?: HeaderCollection;\r\n}\r\n\r\n/**Header collection type */\r\nexport type HeaderCollection = Record<string, string>;\r\n\r\nexport interface ProxyConfig {\r\n    /**Proxy server url */\r\n    url: string;\r\n    /**Basic authentication credentials */\r\n    auth?: {\r\n        /**Username */\r\n        username: string;\r\n        /**Password */\r\n        password: string;\r\n    };\r\n}\r\n\r\n/** Callback with an acquired token called by DynamicsWebApi; \"token\" argument can be a string or an object with a property {accessToken: <token>}  */\r\n// export interface OnTokenAcquiredCallback {\r\n//     (token: any): void;\r\n// }\r\n\r\nexport interface RequestError extends Error {\r\n    /**The name of the error */\r\n    name: string;\r\n    /**This code is not related to the http status code and is frequently empty */\r\n    code?: string;\r\n    /**A message describing the error */\r\n    message: string;\r\n    /**HTTP status code */\r\n    status?: number;\r\n    /**HTTP status text. Frequently empty */\r\n    statusText?: string;\r\n    /**HTTP Response headers */\r\n    headers?: any;\r\n    /**Details about an error */\r\n    innererror?: {\r\n        /**A message describing the error, this is frequently the same as the outer message */\r\n        message?: string;\r\n        /**Microsoft.Crm.CrmHttpException */\r\n        type?: string;\r\n        /**Details from the server about where the error occurred */\r\n        stacktrace?: string;\r\n    };\r\n}\r\n\r\nexport interface MultipleResponse<T = any> {\r\n    /**Multiple respone entities */\r\n    value: T[];\r\n    oDataCount?: number;\r\n    \"@odata.count\"?: number;\r\n    oDataContext?: string;\r\n    \"@odata.context\"?: number;\r\n}\r\n\r\nexport interface AllResponse<T> extends MultipleResponse<T> {\r\n    /**@odata.deltaLink value */\r\n    oDataDeltaLink?: string;\r\n}\r\n\r\nexport interface RetrieveMultipleResponse<T> extends MultipleResponse<T> {\r\n    \"@Microsoft.Dynamics.CRM.totalrecordcount\"?: number;\r\n    \"@Microsoft.Dynamics.CRM.totalrecordcountlimitexceeded\"?: boolean;\r\n    /**@odata.nextLink value */\r\n    oDataNextLink?: string;\r\n    /**@odata.deltaLink value */\r\n    oDataDeltaLink?: string;\r\n    \"@odata.deltaLink\"?: string;\r\n    \"@odata.nextLink\"?: string;\r\n}\r\n\r\nexport interface FetchXmlResponse<T> extends MultipleResponse<T> {\r\n    \"@Microsoft.Dynamics.CRM.totalrecordcount\"?: number;\r\n    \"@Microsoft.Dynamics.CRM.totalrecordcountlimitexceeded\"?: boolean;\r\n    /**Paging information */\r\n    PagingInfo?: {\r\n        /**Number of the next page */\r\n        nextPage?: number;\r\n        /**Next page cookie */\r\n        cookie?: string;\r\n    };\r\n}\r\n\r\nexport interface DownloadResponse {\r\n    /**The name of the file */\r\n    fileName: string;\r\n    /**File size */\r\n    fileSize: number;\r\n    /**File Data */\r\n    data: Uint8Array | Buffer;\r\n}\r\n\r\nexport interface SearchResponse<TValue = any> {\r\n    /**Search results*/\r\n    value: TValue[];\r\n    facets: any | null;\r\n    totalrecordcount: number;\r\n    querycontext: any | null;\r\n}\r\n\r\nexport interface SuggestResponseValue<TDocument = any> {\r\n    text: string;\r\n    document: TDocument;\r\n}\r\n\r\nexport interface SuggestResponse<TValueDocument = any> {\r\n    /**Suggestions*/\r\n    value: SuggestResponseValue<TValueDocument>[];\r\n    querycontext: any | null;\r\n}\r\n\r\nexport interface AutocompleteResponse {\r\n    /**Autocomplete result*/\r\n    value: string | null;\r\n    querycontext: any | null;\r\n}\r\n\r\n//function overloads\r\n\r\ntype CallFunction = {\r\n    /**\r\n     * Calls a Web API function\r\n     *\r\n     * @param name - The name of a function.\r\n     * @returns {Promise} D365 Web Api Response\r\n     */\r\n    <T = any>(name: string): Promise<T>;\r\n    /**\r\n     * Calls a bound Web API function\r\n     *\r\n     * @param request - An object that represents all possible options for a current request.\r\n     * @returns {Promise} D365 Web Api Response\r\n     */\r\n    <T = any>(request: BoundFunctionRequest): Promise<T>;\r\n    /**\r\n     * Calls an unbound Web API function (not bound to a particular table row)\r\n     *\r\n     * @param request - An object that represents all possible options for a current request.\r\n     * @returns {Promise} D365 Web Api Response\r\n     */\r\n    <T = any>(request: UnboundFunctionRequest): Promise<T>;\r\n};\r\n\r\ntype CallAction = {\r\n    /**\r\n     * Calls a bound Web API action (bound to a particular table row)\r\n     *\r\n     * @param request - An object that represents all possible options for a current request.\r\n     * @type {T} Type of the value in a response\r\n     * @returns {Promise} D365 Web Api Response\r\n     */\r\n    <T = any>(request: BoundActionRequest): Promise<T>;\r\n    /**\r\n     * Calls an unbound Web API action (not bound to a particular table row)\r\n     *\r\n     * @param request - An object that represents all possible options for a current request.\r\n     * @type {T} Type of the value in a response\r\n     * @returns {Promise} D365 Web Api Response\r\n     */\r\n    <T = any>(request: UnboundActionRequest): Promise<T>;\r\n    /**\r\n     * Calls a bound Web API action (bound to a particular table row)\r\n     *\r\n     * @param request - An object that represents all possible options for a current request.\r\n     * @type {TResponse} Type of the value in a response\r\n     * @type {TAction} Type of an action object\r\n     * @returns {Promise} D365 Web Api Response\r\n     */\r\n    <TResponse = any, TAction = any>(request: BoundActionRequest<TAction>): Promise<TResponse>;\r\n    /**\r\n     * Calls an unbound Web API action (not bound to a particular table row)\r\n     *\r\n     * @param request - An object that represents all possible options for a current request.\r\n     * @type {TResponse} Type of the value in a response\r\n     * @type {TAction} Type of an action object\r\n     * @returns {Promise} D365 Web Api Response\r\n     */\r\n    <TResponse = any, TAction = any>(request: UnboundActionRequest<TAction>): Promise<TResponse>;\r\n};\r\n\r\ntype SearchFunction = {\r\n    /**\r\n     * Provides a search results page.\r\n     * @param term - The term to be searched for and has a max 100-character limit.\r\n     * @returns {Promise<SearchResponse>} Search result\r\n     */\r\n    (term: string): Promise<SearchResponse>;\r\n    /**\r\n     * Provides a search results page.\r\n     * @param request - An object that represents all possible options for a current request.\r\n     * @returns {Promise<SearchResponse<TValue>>} Search result\r\n     */\r\n    <TValue = any>(request: SearchRequest): Promise<SearchResponse<TValue>>;\r\n};\r\n\r\ntype SuggestFunction = {\r\n    /**\r\n     * Provides suggestions as the user enters text into a form field.\r\n     * @param term - The term to be searched for and has min 3 characters to a max 100-character limit.\r\n     * @returns {Promise<SuggestResponse>} Suggestions result\r\n     */\r\n    (term: string): Promise<SuggestResponse>;\r\n    /**\r\n     * Provides suggestions as the user enters text into a form field.\r\n     * @param request - An object that represents all possible options for a current request.\r\n     * @returns {Promise<SuggestResponse<TValueDocument>>} Suggestions result\r\n     */\r\n    <TValueDocument = any>(request: SuggestRequest): Promise<SuggestResponse<TValueDocument>>;\r\n};\r\n\r\ntype AutocompleteFunction = {\r\n    /**\r\n     * Provides autocompletion of input as the user enters text into a form field.\r\n     * @param term - The term to be searched for and has a 100-character limit.\r\n     * @returns {Promise<AutocompleteResponse>} Result of autocomplete\r\n     */\r\n    (term: string): Promise<AutocompleteResponse>;\r\n    /**\r\n     * Provides autocompletion of input as the user enters text into a form field.\r\n     * @param request - An object that represents all possible options for a current request.\r\n     * @returns {Promise<AutocompleteResponse>} Result of autocomplete\r\n     */\r\n    (request: AutocompleteRequest): Promise<AutocompleteResponse>;\r\n};\r\n", "import { Utility } from \"./Utility\";\r\nimport { ErrorHelper } from \"../helpers/ErrorHelper\";\r\nimport { ApiConfig, Config } from \"../dynamics-web-api\";\r\n\r\ntype ApiType = \"dataApi\" | \"searchApi\";\r\n\r\nexport interface InternalApiConfig extends ApiConfig {\r\n    url: string;\r\n}\r\n\r\nexport interface InternalConfig extends Config {\r\n    dataApi: InternalApiConfig;\r\n    searchApi: InternalApiConfig;\r\n}\r\n\r\nconst getApiUrl = (serverUrl: string | undefined | null, apiConfig: ApiConfig): string => {\r\n    if (Utility.isRunningWithinPortals()) {\r\n        return new URL(\"_api\", global.window.location.origin).toString() + \"/\";\r\n    } else {\r\n        if (!serverUrl) serverUrl = Utility.getClientUrl();\r\n        return new URL(`api/${apiConfig.path}/v${apiConfig.version}`, serverUrl).toString() + \"/\";\r\n    }\r\n};\r\n\r\nconst mergeApiConfigs = (apiConfig: ApiConfig | undefined, apiType: ApiType, internalConfig: InternalConfig): void => {\r\n    const internalApiConfig = internalConfig[apiType] as InternalApiConfig;\r\n\r\n    if (apiConfig?.version) {\r\n        ErrorHelper.stringParameterCheck(apiConfig.version, \"DynamicsWebApi.setConfig\", `config.${apiType}.version`);\r\n        internalApiConfig.version = apiConfig.version;\r\n    }\r\n\r\n    if (apiConfig?.path) {\r\n        ErrorHelper.stringParameterCheck(apiConfig.path, \"DynamicsWebApi.setConfig\", `config.${apiType}.path`);\r\n        internalApiConfig.path = apiConfig.path;\r\n    }\r\n\r\n    internalApiConfig.url = getApiUrl(internalConfig.serverUrl, internalApiConfig);\r\n};\r\n\r\nexport class ConfigurationUtility {\r\n    static mergeApiConfigs = mergeApiConfigs;\r\n\r\n    static merge(internalConfig: InternalConfig, config?: Config): void {\r\n        if (config?.serverUrl) {\r\n            ErrorHelper.stringParameterCheck(config.serverUrl, \"DynamicsWebApi.setConfig\", \"config.serverUrl\");\r\n            internalConfig.serverUrl = config.serverUrl;\r\n        }\r\n\r\n        mergeApiConfigs(config?.dataApi, \"dataApi\", internalConfig);\r\n        mergeApiConfigs(config?.searchApi, \"searchApi\", internalConfig);\r\n\r\n        if (config?.impersonate) {\r\n            internalConfig.impersonate = ErrorHelper.guidParameterCheck(config.impersonate, \"DynamicsWebApi.setConfig\", \"config.impersonate\");\r\n        }\r\n\r\n        if (config?.impersonateAAD) {\r\n            internalConfig.impersonateAAD = ErrorHelper.guidParameterCheck(config.impersonateAAD, \"DynamicsWebApi.setConfig\", \"config.impersonateAAD\");\r\n        }\r\n\r\n        if (config?.onTokenRefresh) {\r\n            ErrorHelper.callbackParameterCheck(config.onTokenRefresh, \"DynamicsWebApi.setConfig\", \"config.onTokenRefresh\");\r\n            internalConfig.onTokenRefresh = config.onTokenRefresh;\r\n        }\r\n\r\n        if (config?.includeAnnotations) {\r\n            ErrorHelper.stringParameterCheck(config.includeAnnotations, \"DynamicsWebApi.setConfig\", \"config.includeAnnotations\");\r\n            internalConfig.includeAnnotations = config.includeAnnotations;\r\n        }\r\n\r\n        if (config?.timeout) {\r\n            ErrorHelper.numberParameterCheck(config.timeout, \"DynamicsWebApi.setConfig\", \"config.timeout\");\r\n            internalConfig.timeout = config.timeout;\r\n        }\r\n\r\n        if (config?.maxPageSize) {\r\n            ErrorHelper.numberParameterCheck(config.maxPageSize, \"DynamicsWebApi.setConfig\", \"config.maxPageSize\");\r\n            internalConfig.maxPageSize = config.maxPageSize;\r\n        }\r\n\r\n        if (config?.returnRepresentation) {\r\n            ErrorHelper.boolParameterCheck(config.returnRepresentation, \"DynamicsWebApi.setConfig\", \"config.returnRepresentation\");\r\n            internalConfig.returnRepresentation = config.returnRepresentation;\r\n        }\r\n\r\n        if (config?.useEntityNames) {\r\n            ErrorHelper.boolParameterCheck(config.useEntityNames, \"DynamicsWebApi.setConfig\", \"config.useEntityNames\");\r\n            internalConfig.useEntityNames = config.useEntityNames;\r\n        }\r\n\r\n        if (config?.headers) {\r\n            internalConfig.headers = config.headers;\r\n        }\r\n\r\n        if (!global.DWA_BROWSER && config?.proxy) {\r\n            ErrorHelper.parameterCheck(config.proxy, \"DynamicsWebApi.setConfig\", \"config.proxy\");\r\n\r\n            if (config.proxy.url) {\r\n                ErrorHelper.stringParameterCheck(config.proxy.url, \"DynamicsWebApi.setConfig\", \"config.proxy.url\");\r\n\r\n                if (config.proxy.auth) {\r\n                    ErrorHelper.parameterCheck(config.proxy.auth, \"DynamicsWebApi.setConfig\", \"config.proxy.auth\");\r\n                    ErrorHelper.stringParameterCheck(config.proxy.auth.username, \"DynamicsWebApi.setConfig\", \"config.proxy.auth.username\");\r\n                    ErrorHelper.stringParameterCheck(config.proxy.auth.password, \"DynamicsWebApi.setConfig\", \"config.proxy.auth.password\");\r\n                }\r\n            }\r\n\r\n            internalConfig.proxy = config.proxy;\r\n        }\r\n    }\r\n\r\n    static default(): InternalConfig {\r\n        return {\r\n            serverUrl: null,\r\n            impersonate: null,\r\n            impersonateAAD: null,\r\n            onTokenRefresh: null,\r\n            includeAnnotations: null,\r\n            maxPageSize: null,\r\n            returnRepresentation: null,\r\n            proxy: null,\r\n            dataApi: {\r\n                path: \"data\",\r\n                version: \"9.2\",\r\n                url: \"\"\r\n            },\r\n            searchApi: {\r\n                path: \"search\",\r\n                version: \"1.0\",\r\n                url: \"\"\r\n            },\r\n        };\r\n    }\r\n}\r\n", "import type * as Core from \"../types\";\r\nimport { Utility } from \"../utils/Utility\";\r\nimport { InternalConfig } from \"../utils/Config\";\r\nimport * as RequestUtility from \"../utils/Request\";\r\nimport { DynamicsWebApiError, ErrorHelper } from \"../helpers/ErrorHelper\";\r\nimport { executeRequest } from \"./helpers/executeRequest\";\r\nimport { AccessToken } from \"../dynamics-web-api\";\r\n\r\nconst _addResponseParams = (requestId: string, responseParams: Record<string, any>) => {\r\n    if (_responseParseParams[requestId]) _responseParseParams[requestId].push(responseParams);\r\n    else _responseParseParams[requestId] = [responseParams];\r\n};\r\n\r\nconst _addRequestToBatchCollection = (requestId: string, request: Core.InternalRequest) => {\r\n    if (_batchRequestCollection[requestId]) _batchRequestCollection[requestId].push(request);\r\n    else _batchRequestCollection[requestId] = [request];\r\n};\r\n\r\nconst _clearRequestData = (requestId: string): void => {\r\n    delete _responseParseParams[requestId];\r\n    if (_batchRequestCollection.hasOwnProperty(requestId)) delete _batchRequestCollection[requestId];\r\n};\r\n\r\nconst _runRequest = async (request: Core.InternalRequest, config: InternalConfig): Promise<Core.WebApiResponse> => {\r\n    try {\r\n        const result = await RequestClient.sendRequest(request, config);\r\n        _clearRequestData(request.requestId!);\r\n\r\n        return result;\r\n    } catch (error) {\r\n        _clearRequestData(request.requestId!);\r\n        throw error;\r\n    } finally {\r\n        _clearRequestData(request.requestId!);\r\n    }\r\n};\r\n\r\nlet _batchRequestCollection: Core.BatchRequestCollection = {};\r\nlet _responseParseParams: { [key: string]: any[] } = {};\r\n\r\nconst _nameExceptions = [\r\n    \"$metadata\",\r\n    \"EntityDefinitions\",\r\n    \"RelationshipDefinitions\",\r\n    \"GlobalOptionSetDefinitions\",\r\n    \"ManagedPropertyDefinitions\",\r\n    \"query\",\r\n    \"suggest\",\r\n    \"autocomplete\",\r\n];\r\n\r\nconst _isEntityNameException = (entityName: string): boolean => {\r\n    return _nameExceptions.indexOf(entityName) > -1;\r\n};\r\n\r\nconst _getCollectionNames = async (entityName: string, config: InternalConfig): Promise<string | null | undefined> => {\r\n    if (!Utility.isNull(RequestUtility.entityNames)) {\r\n        return RequestUtility.findCollectionName(entityName) || entityName;\r\n    }\r\n\r\n    const request = RequestUtility.compose(\r\n        {\r\n            method: \"GET\",\r\n            collection: \"EntityDefinitions\",\r\n            select: [\"EntitySetName\", \"LogicalName\"],\r\n            noCache: true,\r\n            functionName: \"retrieveMultiple\",\r\n        },\r\n        config\r\n    );\r\n\r\n    const result = await _runRequest(request, config);\r\n    RequestUtility.setEntityNames({});\r\n    for (let i = 0; i < result.data.value.length; i++) {\r\n        RequestUtility.entityNames![result.data.value[i].LogicalName] = result.data.value[i].EntitySetName;\r\n    }\r\n\r\n    return RequestUtility.findCollectionName(entityName) || entityName;\r\n};\r\n\r\nconst _checkCollectionName = async (entityName: string | null | undefined, config: InternalConfig): Promise<string | null | undefined> => {\r\n    if (!entityName || _isEntityNameException(entityName)) {\r\n        return entityName;\r\n    }\r\n\r\n    entityName = entityName.toLowerCase();\r\n\r\n    if (!config.useEntityNames) {\r\n        return entityName;\r\n    }\r\n\r\n    try {\r\n        return await _getCollectionNames(entityName, config);\r\n    } catch (error: any) {\r\n        throw new Error(\"Unable to fetch Collection Names. Error: \" + (error as DynamicsWebApiError).message);\r\n    }\r\n};\r\n\r\nexport class RequestClient {\r\n    /**\r\n     * Sends a request to given URL with given parameters\r\n     *\r\n     * @param {InternalRequest} request - Composed request to D365 Web Api\r\n     * @param {InternalConfig} config - DynamicsWebApi config.\r\n     */\r\n    static async sendRequest(request: Core.InternalRequest, config: InternalConfig): Promise<Core.WebApiResponse> {\r\n        request.headers = request.headers || {};\r\n        request.responseParameters = request.responseParameters || {};\r\n        request.requestId = request.requestId || Utility.generateUUID();\r\n\r\n        //add response parameters to parse\r\n        _addResponseParams(request.requestId, request.responseParameters);\r\n\r\n        //stringify passed data\r\n        let processedData = null;\r\n\r\n        const isBatchConverted = request.responseParameters?.convertedToBatch;\r\n\r\n        if (request.path === \"$batch\" && !isBatchConverted) {\r\n            const batchRequest = _batchRequestCollection[request.requestId];\r\n\r\n            if (!batchRequest) throw ErrorHelper.batchIsEmpty();\r\n\r\n            const batchResult = RequestUtility.convertToBatch(batchRequest, config, request);\r\n\r\n            processedData = batchResult.body;\r\n            request.headers = { ...batchResult.headers, ...request.headers };\r\n\r\n            //clear an array of requests\r\n            delete _batchRequestCollection[request.requestId];\r\n        } else {\r\n            processedData = !isBatchConverted ? RequestUtility.processData(request.data, config) : request.data;\r\n\r\n            if (!isBatchConverted) request.headers = RequestUtility.setStandardHeaders(request.headers);\r\n        }\r\n\r\n        if (config.impersonate && !request.headers![\"MSCRMCallerID\"]) {\r\n            request.headers![\"MSCRMCallerID\"] = config.impersonate;\r\n        }\r\n\r\n        if (config.impersonateAAD && !request.headers![\"CallerObjectId\"]) {\r\n            request.headers![\"CallerObjectId\"] = config.impersonateAAD;\r\n        }\r\n\r\n        let token: AccessToken | string | null = null;\r\n\r\n        //call a token refresh callback only if it is set and there is no \"Authorization\" header set yet\r\n        if (config.onTokenRefresh && (!request.headers || (request.headers && !request.headers[\"Authorization\"]))) {\r\n            token = await config.onTokenRefresh();\r\n            if (!token) throw new Error(\"Token is empty. Request is aborted.\");\r\n        }\r\n\r\n        if (token) {\r\n            request.headers![\"Authorization\"] = \"Bearer \" + (token.hasOwnProperty(\"accessToken\") ? (token as AccessToken).accessToken : token);\r\n        }\r\n\r\n        if (Utility.isRunningWithinPortals()) {\r\n            request.headers![\"__RequestVerificationToken\"] = await global.window.shell!.getTokenDeferred();\r\n        }\r\n\r\n        const url = request.apiConfig ? request.apiConfig.url : config.dataApi.url;\r\n\r\n        return await executeRequest({\r\n            method: request.method!,\r\n            uri: url!.toString() + request.path,\r\n            data: processedData,\r\n            proxy: config.proxy,\r\n            isAsync: request.async,\r\n            headers: request.headers!,\r\n            requestId: request.requestId!,\r\n            abortSignal: request.signal,\r\n            responseParams: _responseParseParams,\r\n            timeout: request.timeout || config.timeout,\r\n        });\r\n    }\r\n\r\n    static async makeRequest(request: Core.InternalRequest, config: InternalConfig): Promise<Core.WebApiResponse | undefined> {\r\n        request.responseParameters = request.responseParameters || {};\r\n        //we don't want to mix headers set by the library and by the user\r\n        request.userHeaders = request.headers;\r\n        delete request.headers;\r\n\r\n        if (!request.isBatch) {\r\n            const collectionName = await _checkCollectionName(request.collection, config);\r\n\r\n            request.collection = collectionName;\r\n            RequestUtility.compose(request, config);\r\n            request.responseParameters.convertedToBatch = false;\r\n\r\n            //the URL contains more characters than max possible limit, convert the request to a batch request\r\n            if (request.path!.length > 2000) {\r\n                const batchRequest = RequestUtility.convertToBatch([request], config);\r\n\r\n                //#175 authorization header must be copied as well. \r\n                //todo: is it the only one that needs to be copied?\r\n                if (request.headers![\"Authorization\"]) {\r\n                    batchRequest.headers[\"Authorization\"] = request.headers![\"Authorization\"];\r\n                }\r\n\r\n                request.method = \"POST\";\r\n                request.path = \"$batch\";\r\n                request.data = batchRequest.body;\r\n                request.headers = { ...batchRequest.headers, ...request.userHeaders };\r\n                request.responseParameters.convertedToBatch = true;\r\n            }\r\n\r\n            return _runRequest(request, config);\r\n        }\r\n\r\n        //no need to make a request to web api if it's a part of batch\r\n        RequestUtility.compose(request, config);\r\n        //add response parameters to parse\r\n        _addResponseParams(request.requestId!, request.responseParameters);\r\n        _addRequestToBatchCollection(request.requestId!, request);\r\n    }\r\n\r\n    static _clearTestData(): void {\r\n        RequestUtility.setEntityNames(null);\r\n        _responseParseParams = {};\r\n        _batchRequestCollection = {};\r\n    }\r\n\r\n    static getCollectionName(entityName: string): string | null {\r\n        return RequestUtility.findCollectionName(entityName);\r\n    }\r\n}\r\n", "import type { InternalRequest, InternalBatchRequest } from \"../types\";\r\n\r\nimport { Utility } from \"./Utility\";\r\nimport { Config, HeaderCollection } from \"../dynamics-web-api\";\r\nimport { ErrorHelper } from \"../helpers/ErrorHelper\";\r\nimport { InternalConfig } from \"./Config\";\r\nimport {\r\n    removeCurlyBracketsFromUuid,\r\n    removeLeadingSlash,\r\n    escapeUnicodeSymbols,\r\n    safelyRemoveCurlyBracketsFromUrl,\r\n    SEARCH_FOR_ENTITY_NAME_REGEX,\r\n    removeDoubleQuotes,\r\n} from \"../helpers/Regex\";\r\n\r\nexport let entityNames: Record<string, string | null> | null = null;\r\n\r\nexport const setEntityNames = (newEntityNames: Record<string, string | null> | null) => {\r\n    entityNames = newEntityNames;\r\n};\r\n\r\n/**\r\n * Converts a request object to URL link\r\n * @param request Internal request object\r\n * @param config Internal configuration object\r\n * @returns Modified internal request object\r\n */\r\nexport const compose = (request: InternalRequest, config: InternalConfig): InternalRequest => {\r\n    request.path = request.path || \"\";\r\n    request.functionName = request.functionName || \"\";\r\n    if (!request.url) {\r\n        if (!request._isUnboundRequest && !request.contentId && !request.collection) {\r\n            ErrorHelper.parameterCheck(request.collection, `DynamicsWebApi.${request.functionName}`, \"request.collection\");\r\n        }\r\n        if (request.collection != null) {\r\n            ErrorHelper.stringParameterCheck(request.collection, `DynamicsWebApi.${request.functionName}`, \"request.collection\");\r\n            request.path = request.collection;\r\n\r\n            //add alternate key feature\r\n            if (request.key) {\r\n                request.key = ErrorHelper.keyParameterCheck(request.key, `DynamicsWebApi.${request.functionName}`, \"request.key\");\r\n                request.path += `(${request.key})`;\r\n            }\r\n        }\r\n\r\n        if (request.contentId) {\r\n            ErrorHelper.stringParameterCheck(request.contentId, `DynamicsWebApi.${request.functionName}`, \"request.contentId\");\r\n            if (request.contentId.startsWith(\"$\")) {\r\n                request.path = request.path ? `${request.contentId}/${request.path}` : request.contentId;\r\n            }\r\n        }\r\n\r\n        if (request.addPath) {\r\n            if (request.path) {\r\n                request.path += \"/\";\r\n            }\r\n            request.path += request.addPath;\r\n        }\r\n\r\n        request.path = composeUrl(request, config, request.path);\r\n\r\n        if (request.fetchXml) {\r\n            ErrorHelper.stringParameterCheck(request.fetchXml, `DynamicsWebApi.${request.functionName}`, \"request.fetchXml\");\r\n            let join = request.path.indexOf(\"?\") === -1 ? \"?\" : \"&\";\r\n            request.path += `${join}fetchXml=${encodeURIComponent(request.fetchXml)}`;\r\n        }\r\n    } else {\r\n        ErrorHelper.stringParameterCheck(request.url, `DynamicsWebApi.${request.functionName}`, \"request.url\");\r\n        request.path = request.url.replace(config.dataApi.url, \"\");\r\n    }\r\n\r\n    if (request.hasOwnProperty(\"async\") && request.async != null) {\r\n        ErrorHelper.boolParameterCheck(request.async, `DynamicsWebApi.${request.functionName}`, \"request.async\");\r\n    } else {\r\n        request.async = true;\r\n    }\r\n\r\n    request.headers = composeHeaders(request, config);\r\n\r\n    return request;\r\n};\r\n\r\n/**\r\n * Converts optional parameters of the request to URL. If expand parameter exists this function is called recursively.\r\n * @param request Internal request object\r\n * @param config Internal configuration object\r\n * @param url Starting url\r\n * @param joinSymbol Join symbol. \"&\" by default and \";\" inside an expand query parameter\r\n * @returns Request URL\r\n */\r\nexport const composeUrl = (request: InternalRequest, config: Config, url: string = \"\", joinSymbol: \"&\" | \";\" = \"&\"): string => {\r\n    const queryArray: string[] = [];\r\n\r\n    if (request) {\r\n        if (request.navigationProperty) {\r\n            ErrorHelper.stringParameterCheck(request.navigationProperty, `DynamicsWebApi.${request.functionName}`, \"request.navigationProperty\");\r\n            url += \"/\" + request.navigationProperty;\r\n\r\n            if (request.navigationPropertyKey) {\r\n                let navigationKey = ErrorHelper.keyParameterCheck(\r\n                    request.navigationPropertyKey,\r\n                    `DynamicsWebApi.${request.functionName}`,\r\n                    \"request.navigationPropertyKey\"\r\n                );\r\n                url += \"(\" + navigationKey + \")\";\r\n            }\r\n\r\n            if (request.navigationProperty === \"Attributes\") {\r\n                if (request.metadataAttributeType) {\r\n                    ErrorHelper.stringParameterCheck(request.metadataAttributeType, `DynamicsWebApi.${request.functionName}`, \"request.metadataAttributeType\");\r\n                    url += \"/\" + request.metadataAttributeType;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (request.select?.length) {\r\n            ErrorHelper.arrayParameterCheck(request.select, `DynamicsWebApi.${request.functionName}`, \"request.select\");\r\n\r\n            if (request.functionName == \"retrieve\" && request.select.length == 1 && request.select[0].endsWith(\"/$ref\")) {\r\n                url += \"/\" + request.select[0];\r\n            } else {\r\n                if (request.select[0].startsWith(\"/\") && request.functionName == \"retrieve\") {\r\n                    if (request.navigationProperty == null) {\r\n                        url += request.select.shift();\r\n                    } else {\r\n                        request.select.shift();\r\n                    }\r\n                }\r\n\r\n                //check if anything left in the array\r\n                if (request.select.length) {\r\n                    queryArray.push(\"$select=\" + request.select.join(\",\"));\r\n                }\r\n            }\r\n        }\r\n\r\n        if (request.filter) {\r\n            ErrorHelper.stringParameterCheck(request.filter, `DynamicsWebApi.${request.functionName}`, \"request.filter\");\r\n            const filterResult = safelyRemoveCurlyBracketsFromUrl(request.filter);\r\n            queryArray.push(\"$filter=\" + encodeURIComponent(filterResult));\r\n        }\r\n\r\n        //todo: delete in v2.5\r\n        if (request.fieldName) {\r\n            ErrorHelper.stringParameterCheck(request.fieldName, `DynamicsWebApi.${request.functionName}`, \"request.fieldName\");\r\n            if (!request.property) request.property = request.fieldName;\r\n            delete request.fieldName;\r\n        }\r\n\r\n        if (request.property) {\r\n            ErrorHelper.stringParameterCheck(request.property, `DynamicsWebApi.${request.functionName}`, \"request.property\");\r\n            url += \"/\" + request.property;\r\n        }\r\n\r\n        if (request.savedQuery) {\r\n            queryArray.push(\"savedQuery=\" + ErrorHelper.guidParameterCheck(request.savedQuery, `DynamicsWebApi.${request.functionName}`, \"request.savedQuery\"));\r\n        }\r\n\r\n        if (request.userQuery) {\r\n            queryArray.push(\"userQuery=\" + ErrorHelper.guidParameterCheck(request.userQuery, `DynamicsWebApi.${request.functionName}`, \"request.userQuery\"));\r\n        }\r\n\r\n        if (request.apply) {\r\n            ErrorHelper.stringParameterCheck(request.apply, `DynamicsWebApi.${request.functionName}`, \"request.apply\");\r\n            queryArray.push(\"$apply=\" + request.apply);\r\n        }\r\n\r\n        if (request.count) {\r\n            ErrorHelper.boolParameterCheck(request.count, `DynamicsWebApi.${request.functionName}`, \"request.count\");\r\n            queryArray.push(\"$count=\" + request.count);\r\n        }\r\n\r\n        if (request.top && request.top > 0) {\r\n            ErrorHelper.numberParameterCheck(request.top, `DynamicsWebApi.${request.functionName}`, \"request.top\");\r\n            queryArray.push(\"$top=\" + request.top);\r\n        }\r\n\r\n        if (request.orderBy != null && request.orderBy.length) {\r\n            ErrorHelper.arrayParameterCheck(request.orderBy, `DynamicsWebApi.${request.functionName}`, \"request.orderBy\");\r\n            queryArray.push(\"$orderby=\" + request.orderBy.join(\",\"));\r\n        }\r\n\r\n        if (request.partitionId) {\r\n            ErrorHelper.stringParameterCheck(request.partitionId, `DynamicsWebApi.${request.functionName}`, \"request.partitionId\");\r\n            queryArray.push(\"partitionid='\" + request.partitionId + \"'\");\r\n        }\r\n\r\n        if (request.downloadSize) {\r\n            ErrorHelper.stringParameterCheck(request.downloadSize, `DynamicsWebApi.${request.functionName}`, \"request.downloadSize\");\r\n            queryArray.push(\"size=\" + request.downloadSize);\r\n        }\r\n\r\n        if (request.queryParams?.length) {\r\n            ErrorHelper.arrayParameterCheck(request.queryParams, `DynamicsWebApi.${request.functionName}`, \"request.queryParams\");\r\n            queryArray.push(request.queryParams.join(\"&\"));\r\n        }\r\n\r\n        if (request.fileName) {\r\n            ErrorHelper.stringParameterCheck(request.fileName, `DynamicsWebApi.${request.functionName}`, \"request.fileName\");\r\n            queryArray.push(\"x-ms-file-name=\" + request.fileName);\r\n        }\r\n\r\n        if (request.data) {\r\n            ErrorHelper.parameterCheck(request.data, `DynamicsWebApi.${request.functionName}`, \"request.data\");\r\n        }\r\n\r\n        if (request.isBatch) {\r\n            ErrorHelper.boolParameterCheck(request.isBatch, `DynamicsWebApi.${request.functionName}`, \"request.isBatch\");\r\n        }\r\n\r\n        if (!Utility.isNull(request.inChangeSet)) {\r\n            ErrorHelper.boolParameterCheck(request.inChangeSet, `DynamicsWebApi.${request.functionName}`, \"request.inChangeSet\");\r\n        }\r\n\r\n        if (request.isBatch && Utility.isNull(request.inChangeSet)) request.inChangeSet = true;\r\n\r\n        if (request.timeout) {\r\n            ErrorHelper.numberParameterCheck(request.timeout, `DynamicsWebApi.${request.functionName}`, \"request.timeout\");\r\n        }\r\n\r\n        if (request.expand?.length) {\r\n            ErrorHelper.stringOrArrayParameterCheck(request.expand, `DynamicsWebApi.${request.functionName}`, \"request.expand\");\r\n            if (typeof request.expand === \"string\") {\r\n                queryArray.push(\"$expand=\" + request.expand);\r\n            } else {\r\n                const expandQueryArray: string[] = [];\r\n                for (const { property, ...expand } of request.expand) {\r\n                    if (!property) continue;\r\n\r\n                    const expandRequest: InternalRequest = {\r\n                        functionName: `${request.functionName} $expand`,\r\n                        ...expand,\r\n                    };\r\n                    let expandConverted = composeUrl(expandRequest, config, \"\", \";\");\r\n                    if (expandConverted) {\r\n                        expandConverted = `(${expandConverted.slice(1)})`;\r\n                    }\r\n                    expandQueryArray.push(property + expandConverted);\r\n                }\r\n                if (expandQueryArray.length) {\r\n                    queryArray.push(\"$expand=\" + expandQueryArray.join(\",\"));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return !queryArray.length ? url : url + \"?\" + queryArray.join(joinSymbol);\r\n};\r\n\r\nexport const composeHeaders = (request: InternalRequest, config: Config): HeaderCollection => {\r\n    const headers: HeaderCollection = { ...config.headers, ...request.userHeaders };\r\n\r\n    const prefer = composePreferHeader(request, config);\r\n    if (prefer.length) {\r\n        headers[\"Prefer\"] = prefer;\r\n    }\r\n\r\n    if (request.collection === \"$metadata\") {\r\n        headers[\"Accept\"] = \"application/xml\";\r\n    }\r\n\r\n    if (request.transferMode) {\r\n        headers[\"x-ms-transfer-mode\"] = request.transferMode;\r\n    }\r\n\r\n    if (request.ifmatch != null && request.ifnonematch != null) {\r\n        throw new Error(\r\n            `DynamicsWebApi.${request.functionName}. Either one of request.ifmatch or request.ifnonematch parameters should be used in a call, not both.`\r\n        );\r\n    }\r\n\r\n    if (request.ifmatch) {\r\n        ErrorHelper.stringParameterCheck(request.ifmatch, `DynamicsWebApi.${request.functionName}`, \"request.ifmatch\");\r\n        headers[\"If-Match\"] = request.ifmatch;\r\n    }\r\n\r\n    if (request.ifnonematch) {\r\n        ErrorHelper.stringParameterCheck(request.ifnonematch, `DynamicsWebApi.${request.functionName}`, \"request.ifnonematch\");\r\n        headers[\"If-None-Match\"] = request.ifnonematch;\r\n    }\r\n\r\n    if (request.impersonate) {\r\n        ErrorHelper.stringParameterCheck(request.impersonate, `DynamicsWebApi.${request.functionName}`, \"request.impersonate\");\r\n        headers[\"MSCRMCallerID\"] = ErrorHelper.guidParameterCheck(request.impersonate, `DynamicsWebApi.${request.functionName}`, \"request.impersonate\");\r\n    }\r\n\r\n    if (request.impersonateAAD) {\r\n        ErrorHelper.stringParameterCheck(request.impersonateAAD, `DynamicsWebApi.${request.functionName}`, \"request.impersonateAAD\");\r\n        headers[\"CallerObjectId\"] = ErrorHelper.guidParameterCheck(request.impersonateAAD, `DynamicsWebApi.${request.functionName}`, \"request.impersonateAAD\");\r\n    }\r\n\r\n    if (request.token) {\r\n        ErrorHelper.stringParameterCheck(request.token, `DynamicsWebApi.${request.functionName}`, \"request.token\");\r\n        headers[\"Authorization\"] = \"Bearer \" + request.token;\r\n    }\r\n\r\n    if (request.duplicateDetection) {\r\n        ErrorHelper.boolParameterCheck(request.duplicateDetection, `DynamicsWebApi.${request.functionName}`, \"request.duplicateDetection\");\r\n        headers[\"MSCRM.SuppressDuplicateDetection\"] = \"false\";\r\n    }\r\n\r\n    if (request.bypassCustomPluginExecution) {\r\n        ErrorHelper.boolParameterCheck(request.bypassCustomPluginExecution, `DynamicsWebApi.${request.functionName}`, \"request.bypassCustomPluginExecution\");\r\n        headers[\"MSCRM.BypassCustomPluginExecution\"] = \"true\";\r\n    }\r\n\r\n    if (request.noCache) {\r\n        ErrorHelper.boolParameterCheck(request.noCache, `DynamicsWebApi.${request.functionName}`, \"request.noCache\");\r\n        headers[\"Cache-Control\"] = \"no-cache\";\r\n    }\r\n\r\n    if (request.mergeLabels) {\r\n        ErrorHelper.boolParameterCheck(request.mergeLabels, `DynamicsWebApi.${request.functionName}`, \"request.mergeLabels\");\r\n        headers[\"MSCRM.MergeLabels\"] = \"true\";\r\n    }\r\n\r\n    if (request.contentId) {\r\n        ErrorHelper.stringParameterCheck(request.contentId, `DynamicsWebApi.${request.functionName}`, \"request.contentId\");\r\n        if (!request.contentId.startsWith(\"$\")) {\r\n            headers[\"Content-ID\"] = request.contentId;\r\n        }\r\n    }\r\n\r\n    if (request.contentRange) {\r\n        ErrorHelper.stringParameterCheck(request.contentRange, `DynamicsWebApi.${request.functionName}`, \"request.contentRange\");\r\n        headers[\"Content-Range\"] = request.contentRange;\r\n    }\r\n\r\n    if (request.range) {\r\n        ErrorHelper.stringParameterCheck(request.range, `DynamicsWebApi.${request.functionName}`, \"request.range\");\r\n        headers[\"Range\"] = request.range;\r\n    }\r\n\r\n    return headers;\r\n};\r\n\r\nexport const composePreferHeader = (request: InternalRequest, config: Config): string => {\r\n    let { returnRepresentation, includeAnnotations, maxPageSize, trackChanges, continueOnError } = request;\r\n\r\n    if (request.prefer && request.prefer.length) {\r\n        ErrorHelper.stringOrArrayParameterCheck(request.prefer, `DynamicsWebApi.${request.functionName}`, \"request.prefer\");\r\n        const preferArray = typeof request.prefer === \"string\" ? request.prefer.split(\",\") : request.prefer;\r\n\r\n        preferArray.forEach((item) => {\r\n            const trimmedItem = item.trim();\r\n            if (trimmedItem === \"return=representation\") {\r\n                returnRepresentation = true;\r\n            } else if (trimmedItem.includes(\"odata.include-annotations=\")) {\r\n                includeAnnotations = removeDoubleQuotes(trimmedItem.replace(\"odata.include-annotations=\", \"\"));\r\n            } else if (trimmedItem.startsWith(\"odata.maxpagesize=\")) {\r\n                maxPageSize = Number(removeDoubleQuotes(trimmedItem.replace(\"odata.maxpagesize=\", \"\"))) || 0;\r\n            } else if (trimmedItem.includes(\"odata.track-changes\")) {\r\n                trackChanges = true;\r\n            } else if (trimmedItem.includes(\"odata.continue-on-error\")) {\r\n                continueOnError = true;\r\n            }\r\n        });\r\n    }\r\n\r\n    //clear array\r\n    const prefer: string[] = [];\r\n\r\n    if (config) {\r\n        if (returnRepresentation == null) {\r\n            returnRepresentation = config.returnRepresentation;\r\n        }\r\n        includeAnnotations = includeAnnotations ?? config.includeAnnotations;\r\n        maxPageSize = maxPageSize ?? config.maxPageSize;\r\n    }\r\n\r\n    if (returnRepresentation) {\r\n        ErrorHelper.boolParameterCheck(returnRepresentation, `DynamicsWebApi.${request.functionName}`, \"request.returnRepresentation\");\r\n        prefer.push(\"return=representation\");\r\n    }\r\n\r\n    if (includeAnnotations) {\r\n        ErrorHelper.stringParameterCheck(includeAnnotations, `DynamicsWebApi.${request.functionName}`, \"request.includeAnnotations\");\r\n        prefer.push(`odata.include-annotations=\"${includeAnnotations}\"`);\r\n    }\r\n\r\n    if (maxPageSize && maxPageSize > 0) {\r\n        ErrorHelper.numberParameterCheck(maxPageSize, `DynamicsWebApi.${request.functionName}`, \"request.maxPageSize\");\r\n        prefer.push(\"odata.maxpagesize=\" + maxPageSize);\r\n    }\r\n\r\n    if (trackChanges) {\r\n        ErrorHelper.boolParameterCheck(trackChanges, `DynamicsWebApi.${request.functionName}`, \"request.trackChanges\");\r\n        prefer.push(\"odata.track-changes\");\r\n    }\r\n\r\n    if (continueOnError) {\r\n        ErrorHelper.boolParameterCheck(continueOnError, `DynamicsWebApi.${request.functionName}`, \"request.continueOnError\");\r\n        prefer.push(\"odata.continue-on-error\");\r\n    }\r\n\r\n    return prefer.join(\",\");\r\n};\r\n\r\nexport const convertToBatch = (requests: InternalRequest[], config: InternalConfig, batchRequest?: InternalRequest): InternalBatchRequest => {\r\n    const batchBoundary = `dwa_batch_${Utility.generateUUID()}`;\r\n\r\n    const batchBody: string[] = [];\r\n    let currentChangeSet: string | null = null;\r\n    let contentId = 100000;\r\n\r\n    const addHeaders = (headers: Record<string, string>, batchBody: string[]) => {\r\n        for (const key in headers) {\r\n            if (key === \"Authorization\" || key === \"Content-ID\") continue;\r\n            batchBody.push(`${key}: ${headers[key]}`);\r\n        }\r\n    };\r\n\r\n    requests.forEach((internalRequest) => {\r\n        internalRequest.functionName = \"executeBatch\";\r\n        if (batchRequest?.inChangeSet === false) internalRequest.inChangeSet = false;\r\n        const inChangeSet = internalRequest.method === \"GET\" ? false : !!internalRequest.inChangeSet;\r\n\r\n        if (!inChangeSet && currentChangeSet) {\r\n            //end current change set\r\n            batchBody.push(`\\n--${currentChangeSet}--`);\r\n\r\n            currentChangeSet = null;\r\n            contentId = 100000;\r\n        }\r\n\r\n        if (!currentChangeSet) {\r\n            batchBody.push(`\\n--${batchBoundary}`);\r\n\r\n            if (inChangeSet) {\r\n                currentChangeSet = `changeset_${Utility.generateUUID()}`;\r\n                batchBody.push(\"Content-Type: multipart/mixed;boundary=\" + currentChangeSet);\r\n            }\r\n        }\r\n\r\n        if (inChangeSet) {\r\n            batchBody.push(`\\n--${currentChangeSet}`);\r\n        }\r\n\r\n        batchBody.push(\"Content-Type: application/http\");\r\n        batchBody.push(\"Content-Transfer-Encoding: binary\");\r\n\r\n        if (inChangeSet) {\r\n            const contentIdValue = internalRequest.headers!.hasOwnProperty(\"Content-ID\") ? internalRequest.headers![\"Content-ID\"] : ++contentId;\r\n\r\n            batchBody.push(`Content-ID: ${contentIdValue}`);\r\n        }\r\n\r\n        if (!internalRequest.path?.startsWith(\"$\")) {\r\n            batchBody.push(`\\n${internalRequest.method} ${config.dataApi.url}${internalRequest.path} HTTP/1.1`);\r\n        } else {\r\n            batchBody.push(`\\n${internalRequest.method} ${internalRequest.path} HTTP/1.1`);\r\n        }\r\n\r\n        if (internalRequest.method === \"GET\") {\r\n            batchBody.push(\"Accept: application/json\");\r\n        } else {\r\n            batchBody.push(\"Content-Type: application/json\");\r\n        }\r\n\r\n        if (internalRequest.headers) {\r\n            addHeaders(internalRequest.headers, batchBody);\r\n        }\r\n\r\n        if (internalRequest.data) {\r\n            batchBody.push(`\\n${processData(internalRequest.data, config)}`);\r\n        }\r\n    });\r\n\r\n    if (currentChangeSet) {\r\n        batchBody.push(`\\n--${currentChangeSet}--`);\r\n    }\r\n\r\n    batchBody.push(`\\n--${batchBoundary}--`);\r\n\r\n    const headers = setStandardHeaders(batchRequest?.userHeaders);\r\n    headers[\"Content-Type\"] = `multipart/mixed;boundary=${batchBoundary}`;\r\n\r\n    return { headers: headers, body: batchBody.join(\"\\n\") };\r\n};\r\n\r\nexport const findCollectionName = (entityName: string): string | null => {\r\n    if (Utility.isNull(entityNames)) return null;\r\n\r\n    const collectionName = entityNames[entityName];\r\n    if (!collectionName) {\r\n        for (const key in entityNames) {\r\n            if (entityNames[key] === entityName) {\r\n                return entityName;\r\n            }\r\n        }\r\n    }\r\n\r\n    return collectionName;\r\n};\r\n\r\nexport const processData = (data: any, config: InternalConfig): string | Uint8Array | Uint16Array | Uint32Array | null => {\r\n    if (!data) return null;\r\n\r\n    if (data instanceof Uint8Array || data instanceof Uint16Array || data instanceof Uint32Array) return data;\r\n\r\n    const replaceEntityNameWithCollectionName = (value: string): string => {\r\n        const valueParts = SEARCH_FOR_ENTITY_NAME_REGEX.exec(value);\r\n        if (valueParts && valueParts.length > 2) {\r\n            const collectionName = findCollectionName(valueParts[1]);\r\n            if (!Utility.isNull(collectionName)) {\r\n                return value.replace(SEARCH_FOR_ENTITY_NAME_REGEX, `${collectionName}$2`);\r\n            }\r\n        }\r\n        return value;\r\n    };\r\n\r\n    const addFullWebApiUrl = (key: string, value: string): string => {\r\n        if (!value.startsWith(config.dataApi.url)) {\r\n            if (key.endsWith(\"@odata.bind\")) {\r\n                if (!value.startsWith(\"/\")) {\r\n                    value = `/${value}`;\r\n                }\r\n            } else {\r\n                value = `${config.dataApi.url}${removeLeadingSlash(value)}`;\r\n            }\r\n        }\r\n        return value;\r\n    };\r\n\r\n    const stringifiedData = JSON.stringify(data, (key, value) => {\r\n        if (key.endsWith(\"@odata.bind\") || key.endsWith(\"@odata.id\")) {\r\n            if (typeof value === \"string\" && !value.startsWith(\"$\")) {\r\n                value = removeCurlyBracketsFromUuid(value);\r\n                if (config.useEntityNames) {\r\n                    value = replaceEntityNameWithCollectionName(value);\r\n                }\r\n                value = addFullWebApiUrl(key, value);\r\n            }\r\n        } else if (key.startsWith(\"oData\") || key.endsWith(\"_Formatted\") || key.endsWith(\"_NavigationProperty\") || key.endsWith(\"_LogicalName\")) {\r\n            return undefined;\r\n        }\r\n        return value;\r\n    });\r\n\r\n    return escapeUnicodeSymbols(stringifiedData);\r\n};\r\n\r\nexport const setStandardHeaders = (headers: HeaderCollection = {}): HeaderCollection => {\r\n    if (!headers[\"Accept\"]) headers[\"Accept\"] = \"application/json\";\r\n    if (!headers[\"OData-MaxVersion\"]) headers[\"OData-MaxVersion\"] = \"4.0\";\r\n    if (!headers[\"OData-Version\"]) headers[\"OData-Version\"] = \"4.0\";\r\n    if (headers[\"Content-Range\"]) headers[\"Content-Type\"] = \"application/octet-stream\";\r\n    else if (!headers[\"Content-Type\"]) headers[\"Content-Type\"] = \"application/json; charset=utf-8\";\r\n\r\n    return headers;\r\n};\r\n", "import type { RequestOptions, WebApiResponse } from \"../../types\";\r\n\r\nexport async function executeRequest(options: RequestOptions): Promise<WebApiResponse> {\r\n    return global.DWA_BROWSER ? require(\"../xhr\").executeRequest(options) : require(\"../http\").executeRequest(options);\r\n}\r\n"],
  "mappings": "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",
  "names": ["getCrypto", "generateRandomBytes", "init_Crypto", "__esmMin", "isUuid", "value", "UUID_REGEX", "extractUuid", "match", "EXTRACT_UUID_REGEX", "extractUuidFromUrl", "url", "EXTRACT_UUID_FROM_URL_REGEX", "removeCurlyBracketsFromUuid", "REMOVE_BRACKETS_FROM_UUID_REGEX", "_match", "p1", "safelyRemoveCurlyBracketsFromUrl", "QUOTATION_MARK_REGEX", "part", "index", "convertToReferenceObject", "responseData", "result", "ENTITY_UUID_REGEX", "parsePagingCookie", "pagingCookie", "info", "PAGING_COOKIE_REGEX", "page", "sanitizedCookie", "sanitizeCookie", "cookie", "characterMap", "SPECIAL_CHARACTER_REGEX", "char", "removeLeadingSlash", "LEADING_SLASH_REGEX", "escapeUnicodeSymbols", "UNICODE_SYMBOLS_REGEX", "chr", "removeDoubleQuotes", "DOUBLE_QUOTE_REGEX", "getUpdateMethod", "collection", "SPECIAL_COLLECTION_FOR_UPDATE_REGEX", "UUID", "BATCH_RESPONSE_HEADERS_REGEX", "HTTP_STATUS_REGEX", "CONTENT_TYPE_PLAIN_REGEX", "ODATA_ENTITYID_REGEX", "TEXT_REGEX", "LINE_ENDING_REGEX", "SEARCH_FOR_ENTITY_NAME_REGEX", "FETCH_XML_TOP_REGEX", "FETCH_XML_PAGE_REGEX", "FETCH_XML_REPLACE_REGEX", "init_Regex", "__esmMin", "formatParameterValue", "value", "isUuid", "processParameters", "parameters", "parameterNames", "functionParams", "urlQuery", "parameterName", "index", "paramIndex", "extractUuid", "hasHeader", "headers", "name", "getHeader", "downloadChunkSize", "_Utility", "Utility", "init_Utility", "__esmMin", "init_Crypto", "init_Regex", "pageCookies", "currentPageNumber", "result", "parsePagingCookie", "c", "generateRandomBytes", "clientUrl", "obj", "src", "excludeProps", "target", "prop", "request", "fileBuffer", "chunkSize", "offset", "count", "content", "i", "binaryString", "bytes", "throwParameterError", "functionName", "parameterName", "type", "ErrorHelper", "init_ErrorHelper", "__esmMin", "init_Regex", "_ErrorHelper", "req", "parameter", "maxLength", "parsedError", "parameters", "error", "k", "match", "extractUuid", "alternateKeys", "i", "callbackParameter", "isBatch", "_a", "_b", "_DWA", "DWA", "init_dwa", "__esmMin", "annotation", "dateReviver", "key", "value", "a", "init_dateReviver", "__esmMin", "parseBatchHeaders", "text", "ctx", "headers", "parts", "line", "pos", "readLine", "BATCH_RESPONSE_HEADERS_REGEX", "readTo", "LINE_ENDING_REGEX", "searchRegTerm", "start", "slicedText", "match", "end", "getHttpStatus", "response", "HTTP_STATUS_REGEX", "getPlainContent", "textReg", "TEXT_REGEX", "handlePlainContent", "batchResponse", "parseParams", "requestNumber", "plainContent", "handlePlainResponse", "handleEmptyContent", "entityUrl", "ODATA_ENTITYID_REGEX", "extractUuidFromUrl", "processBatchPart", "httpStatusString", "httpStatus", "httpStatusMessage", "responseData", "CONTENT_TYPE_PLAIN_REGEX", "parsedResponse", "handleJsonResponse", "responseHeaders", "ErrorHelper", "parseBatchResponse", "delimiter", "batchResponseParts", "result", "part", "batchToProcess", "init_parseBatchResponse", "__esmMin", "init_ErrorHelper", "init_Regex", "init_parseResponse", "getFormattedKeyValue", "keyName", "value", "newKey", "format", "DWA", "parseData", "object", "parseParams", "convertToReferenceObject", "currentKey", "j", "formattedKeyValue", "aliasKeys", "Utility", "base64ToString", "base64", "parseFileResponse", "response", "responseHeaders", "data", "parseResult", "location", "getHeader", "isBatchResponse", "isFileResponse", "hasHeader", "isJsonResponse", "handleBatchResponse", "batch", "parseBatchResponse", "handleFileResponse", "handleJsonResponse", "requestNumber", "dateReviver", "handlePlainResponse", "numberResponse", "handleEmptyResponse", "entityUrl", "extractUuidFromUrl", "result", "parseResponse", "init_parseResponse", "__esmMin", "init_dwa", "init_Utility", "init_dateReviver", "init_Regex", "init_parseBatchResponse", "parseResponseHeaders", "headerStr", "headers", "headerPairs", "ilen", "headerPair", "index", "init_parseResponseHeaders", "__esmMin", "xhr_exports", "__export", "XhrWrapper", "executeRequest", "options", "resolve", "reject", "_executeRequest", "successCallback", "errorCallback", "data", "headers", "responseParams", "signal", "ErrorHelper", "request", "key", "abort", "responseHeaders", "parseResponseHeaders", "response", "parseResponse", "error", "errorParsed", "errorParameters", "init_xhr", "__esmMin", "init_ErrorHelper", "init_parseResponse", "init_parseResponseHeaders", "dynamics_web_api_exports", "__export", "DynamicsWebApi", "init_Utility", "init_ErrorHelper", "getApiUrl", "serverUrl", "apiConfig", "Utility", "mergeApiConfigs", "apiType", "internalConfig", "internalApiConfig", "ErrorHelper", "ConfigurationUtility", "config", "init_Utility", "init_ErrorHelper", "init_Utility", "init_Utility", "init_ErrorHelper", "init_Regex", "entityNames", "setEntityNames", "newEntityNames", "compose", "request", "config", "ErrorHelper", "composeUrl", "join", "composeHeaders", "url", "joinSymbol", "queryArray", "navigationKey", "filterResult", "safelyRemoveCurlyBracketsFromUrl", "Utility", "expandQueryArray", "property", "expand", "expandRequest", "expandConverted", "headers", "prefer", "composePreferHeader", "returnRepresentation", "includeAnnotations", "maxPageSize", "trackChanges", "continueOnError", "item", "trimmedItem", "removeDoubleQuotes", "convertToBatch", "requests", "batchRequest", "batchBoundary", "batchBody", "currentChangeSet", "contentId", "addHeaders", "key", "internalRequest", "inChangeSet", "contentIdValue", "processData", "setStandardHeaders", "findCollectionName", "entityName", "collectionName", "data", "replaceEntityNameWithCollectionName", "value", "valueParts", "SEARCH_FOR_ENTITY_NAME_REGEX", "addFullWebApiUrl", "removeLeadingSlash", "stringifiedData", "removeCurlyBracketsFromUuid", "escapeUnicodeSymbols", "init_ErrorHelper", "executeRequest", "options", "_addResponseParams", "requestId", "responseParams", "_responseParseParams", "_addRequestToBatchCollection", "request", "_batchRequestCollection", "_clearRequestData", "_runRequest", "config", "result", "RequestClient", "error", "_nameExceptions", "_isEntityNameException", "entityName", "_getCollectionNames", "Utility", "entityNames", "findCollectionName", "compose", "setEntityNames", "i", "_checkCollectionName", "processedData", "isBatchConverted", "batchRequest", "ErrorHelper", "batchResult", "convertToBatch", "processData", "setStandardHeaders", "token", "url", "executeRequest", "collectionName", "init_Regex", "DynamicsWebApi", "_DynamicsWebApi", "config", "ConfigurationUtility", "request", "RequestClient", "ErrorHelper", "internalRequest", "Utility", "getUpdateMethod", "ifmatch", "error", "field", "fieldValue", "ifnonematch", "fileBytes", "chunkSize", "offset", "response", "bytesDownloaded", "data", "nextPageLink", "records", "pageLink", "result", "FETCH_XML_TOP_REGEX", "replacementString", "FETCH_XML_PAGE_REGEX", "FETCH_XML_REPLACE_REGEX", "_executeFetchXmlAll", "primaryKey", "relatedKey", "getFunctionName", "isObject", "functionName", "parameterName", "functionParameters", "entityName"]
}
